@model FMDSS.Entity.Protection.ViewModel.OffenceDetailsModel
@{
    ViewBag.Title = "Show Offence History";
    Layout = Convert.ToString(HttpContext.Current.Session["CurrentLayout"].ToString());
}
<div id="page-wrapper-inn">
    <div class="col-lg-12 pad">
        <h1 class="page-header">Register Complaint/Offence</h1>
    </div>
    <div class="row">
        <div class="col-lg-12" id="historyDiv">

            <div class="panel panel-default">

                @*@using (Html.BeginForm("AddOffenceDetails", "Offence", FormMethod.Post, new { data_behavior = "confirm", enctype = "multipart/form-data", id = "frmAddOffence", onsubmit = "return ValidateFiles(this);" }))
                {*@
                    @Html.AntiForgeryToken()
                    <div class="panel-body">
                        @Html.Partial("_ErrorMsg")
                        @Html.HiddenFor(m => m.ID)
                        <div class="col-lg-12 hide">
                            <div class="form-group un-bold">
                                <label>
                                    @Html.RadioButtonFor(x => x.RequestType, "Self", new { id = "rdoSelf", @checked = "checked" }) <i>Self</i>
                                </label>
                                <label>
                                    @Html.RadioButtonFor(x => x.RequestType, "ByComplaint", new { id = "rdoName" })<i>By-Complaint</i>
                                </label>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Range: <span class="mandatory">*</span></label>
                                @Html.DropDownListFor(x => x.RangeCode, (IEnumerable<SelectListItem>)ViewBag.RangeCode, "--Select--", new { @class = "form-control previewMode", id = "ddlRange", onchange = "BindNaka(this,'ddlNaka')" })
                                <div class="alert-danger1">@Html.ValidationMessageFor(x => x.RangeCode)</div>

                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Naka: <span class="mandatory">*</span></label>
                                @Html.DropDownListFor(x => x.NakaID, new SelectList(string.Empty, "Value", "Text"), "--Select--", new { @class = "form-control previewMode", id = "ddlNaka" })
                                <div class="alert-danger1">@Html.ValidationMessageFor(x => x.NakaID)</div>

                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="Areainha">
                                    FIR Number:<span class="mandatory">*</span>
                                </label>
                                @{if (Model.FIRNumber != null && Model.FIRNumber.Trim() != "")
                                    {
                                        @Html.TextBoxFor(x => x.FIRNumber, new { @class = "form-control common previewMode", title = "", placeholder = "Enter FIR No ", maxlength = 50, id = "txtFIRNumber", @readonly = "readonly" })
                                        <div class="alert-danger1">@Html.ValidationMessageFor(x => x.FIRNumber)</div>
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(x => x.FIRNumber, new { @class = "form-control common previewMode StopPaste", title = "", placeholder = "Enter FIR No ", maxlength = 50, id = "txtFIRNumber", onkeypress = "return RestrictSpecialChar2(event);", onchange = "return RestrictSpecialChar2(event);" })
                                        <div class="alert-danger1">@Html.ValidationMessageFor(x => x.FIRNumber)</div>
                                    }
                                }

                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="Areainha">
                                    FIR Date:<span class="mandatory">*</span>
                                </label>
                                @{if (Model.FIRNumber != null && Model.FIRNumber.Trim() != "")
                                    {
                                        @Html.TextBoxFor(x => x.FIRDate, new { @class = "form-control common previewMode ", title = "", placeholder = "FIR DATE ", maxlength = 50, id = "txtFIRDate", @readonly = "readonly", @type = "text" })
                                        <div class="alert-danger1">@Html.ValidationMessageFor(x =>x.FIRDate)</div>

                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(x => x.FIRDate, new { @class = "form-control common previewModeDate StopPaste", title = "", placeholder = "Enter FIR Date ", maxlength = 50, id = "txtFIRDate", @readonly = "readonly" })
                                        <div class="alert-danger1">@Html.ValidationMessageFor(x => x.FIRDate)</div>
                                    }
                                }

                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Upload Copy of FIR [ Image/ PDF]:<span class="mandatory">*</span><br><i class="small">Upload file up to 8 MB</i></label>
                                @*@Html.TextBox("UploadFile", "", new { @class = "form-control HideInfoForApprover previewMode", id = "fuFIR", type = "file", onchange = "UploadData(30)", accept = ".pdf,.jpeg,.jpg,.png" })*@
                                <div id="errordivUpload" class="alert-danger1"></div>

                                <div>
                                    @*@if (Session["UploadFile"] != null)
                                        {
                                            foreach (var item2 in ((List<FMDSS.Entity.ViewModel.CommonDocument>
                                                )Session["UploadFile"]).Where(x => x.DocumentTypeID == Convert.ToInt32(FMDSS.DocumentType.FIREvidence)))
                                             {
                                             <a href="@Url.Content("~/" + item2.DocumentPath)" target="_blank"><img src="@Url.Content("~/images/jpeg.png")" width="30" /></a>@item2.DocumentName
                                            }
                                        }*@
                                    <div class="tblmax">
                                        <table class="table table-striped table-bordered table-hover gridtable">
                                            <thead>
                                                <tr>
                                                    <th>SNo.</th>
                                                    <th>FileName</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody id="tblFIREvidenceFiles">
                                                @if (Session["UploadFile"] != null)
                                                {
                                                    var cntr = 1;
                                                    foreach (var item2 in ((List<FMDSS.Entity.ViewModel.CommonDocument>
                                             )Session["UploadFile"]).Where(x => x.DocumentTypeID == Convert.ToInt32(FMDSS.DocumentType.FIREvidence)))
                                                    {
                                                        <tr>
                                                            <td style=display:none;>@item2.TempID</td>
                                                            <td>@Html.Raw(cntr++)</td>
                                                            <td><a href="@Url.Content("~/" + item2.DocumentPath)" target="_blank"><img src="@Url.Content("~/images/jpeg.png")" width="30" /></a>@item2.DocumentName</td>
                                                            <td style="width:5%"><button type=button class='btn btn-danger btn-circle btnDeleteDocument' style=cursor:pointer><i class='fa fa-times'></i></button></td>
                                                        </tr>
                                                    }
                                                }
                                                else
                                                {
                                                    <tr class="rowSkip"><td colspan="3">No file Uploaded</td></tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                @*AddOffence*@
                                <div class="tblmax hide">
                                    <table class="table table-striped table-bordered table-hover gridtable">
                                        <thead>
                                            <tr>
                                                <th>SNo.</th>
                                                <th>FileName</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody id="tblFIREvidenceFiles">
                                            @if (Session["UploadFile"] != null)
                                            {
                                                var cntr = 1;
                                                foreach (var item in ((List<FMDSS.Entity.ViewModel.CommonDocument>)Session["UploadFile"]).Where(x => x.DocumentTypeID == Convert.ToInt32(FMDSS.DocumentType.FIREvidence)))
                                                {
                                                    <tr>
                                                        <td style=display:none;>@item.TempID</td>
                                                        <td>@Html.Raw(cntr++)</td>
                                                        <td><a href="@Url.Content("~/" + item.DocumentPath)" target="_blank"><img src="@Url.Content("~/images/jpeg.png")" width="30" /></a>@item.DocumentName</td>
                                                        <td style="width:5%"><button type=button class='btn btn-danger btn-circle btnDeleteDocument' style=cursor:pointer><i class='fa fa-times'></i></button></td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr class="rowSkip"><td colspan="3">No file Uploaded</td></tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Offender Name: <span class="mandatory">*</span></label>
                                @Html.TextBoxFor(x => x.OffenderName, new { @class = "form-control previewMode onlyletters StopPaste", id = "txtOffenderName", @maxlength = "50" })
                                <div class="alert-danger1">@Html.ValidationMessageFor(x => x.OffenderName)</div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Offender Address: <span class="mandatory">*</span></label>
                                @Html.TextBoxFor(x => x.OffenderAddress, new { @class = "form-control previewMode StopPaste", id = "txtOffenderAddress", onkeypress = "return RestrictSpecialChar2(event);", onchange = "return RestrictSpecialChar2(event);", @maxlength = "150" })
                                <div class="alert-danger1">@Html.ValidationMessageFor(x => x.OffenderAddress)</div>
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <div class="form-group">
                                <label>Brief Description of Offense[ Place / Species / No ]: <span class="mandatory">*</span></label>
                                @Html.TextAreaFor(x => x.OffenceDescription, new { @class = "form-control previewMode  StopPaste", @onkeypress = "RestrictSpecialChar2(event)", @onchange = "RestrictSpecialChar2(event)", @maxlength = "250" })
                                <div class="alert-danger1">@Html.ValidationMessageFor(x => x.OffenceDescription)</div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group" id="divOffenceCategory">
                                <label>Offence Category:<span class="mandatory">*</span> </label>
                                @Html.DropDownList("ddlOffenceCategory", (IEnumerable<SelectListItem>)ViewBag.OffenceCategory, new { @class = "form-control previewMode multi-ddl-height-102", multiple = "multiple" })
                                @Html.HiddenFor(X => X.OffenceCategory, new { id = "hdnOffenceCategory" })
                                @*<div class="alert-danger1">@Html.ValidationMessageFor(x => x.OffenceCategory)</div>*@
                            </div>
                        </div>
                        <div id="divWoodCuttingData" class="@string.Format("{0}", (Model.OffenceCategory!=null && Array.IndexOf(Model.OffenceCategory.Split(','),"1")>-1) ? "":"hide")">
                            <div class="col-lg-2">
                                <div class="form-group">
                                    <label>No Of Tree:</label>
                                    @Html.TextBoxFor(x => x.NoOfTree, new { @class = "form-control previewMode StopPaste", id = "txtNoOfTree", @onkeypress = "AllowNumericOnly(event)", @maxlength = "10" })
                                </div>
                            </div>
                            <div class="col-lg-2">
                                <div class="form-group">
                                    <label>Volume In Cubic Metre:</label>
                                    @Html.TextBoxFor(x => x.VolumeInCubicMetre, new { @class = "form-control previewMode StopPaste", id = "txtVolumeInCubicMetre", @onkeypress = "AllowNumberOnly(event)", @maxlength = "15" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="form-group">
                                <input type="checkbox" name="IsWPA" id="chkIsWPA" value="false" @string.Format("{0}", Model.IsWPA == true ? "checked=checked" : "") onchange="OnChange_IsWPA(this)" class="previewMode" /><label> WPA 1972</label>
                                <input type="checkbox" name="IsFA" id="chkIsFA" value="true" @string.Format("{0}", (Model.ID == 0 || Model.IsFA == true) ? "checked=checked" : "") onchange="OnChange_IsFA(this)" class="previewMode" /><label> FA 1953</label>
                            </div>
                        </div>

                        <div class="col-lg-3 @string.Format("{0}",Model.IsWPA == true ? "" : "hide")" id="divWPA">
                            <div class="form-group">
                                <label>WPA 1972: </label>
                                @Html.TextBoxFor(x => x.WPADescription, new { @class = "form-control previewMode StopPaste", id = "txtWPA", @maxlength = "20", onkeypress = "return RestrictSpecialChar2(event);", onchange = "return RestrictSpecialChar2(event);" })
                                <div id="errordivName" style="display:none" class="alert-danger1"></div>
                            </div>
                        </div>

                        <div class="col-lg-3" id="divFA">
                            <div class="form-group">
                                <label>FA 1953: </label>
                                @Html.TextBoxFor(x => x.FADescription, new { @class = "form-control previewMode StopPaste", id = "txtFA", @maxlength = "20", onkeypress = "return RestrictSpecialChar2(event);", onchange = "return RestrictSpecialChar2(event);" })
                                <div id="errordivName" style="display:none" class="alert-danger1"></div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Investigator Officer: <span class="mandatory">*</span></label>
                                @Html.TextBoxFor(x => x.InvestigatorOfficer, new { @class = "form-control previewMode onlyletters StopPaste", id = "txtInvestigatorOfficer", onkeypress = "return RestrictSpecialChar2(event);", onchange = "return RestrictSpecialChar2(event);", @maxlength = "50" })
                                <div class="alert-danger1">@Html.ValidationMessageFor(x => x.InvestigatorOfficer)</div>
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <label>Item Seized:</label>
                            <div class="form-group">
                                <table id="tblSeizedItemDetails" class="table table-striped table-bordered table-hover notranslate">
                                    <thead>
                                        <tr style="color:#999; background-color:#ddd;">
                                            <td colspan="4"><i>All Qty units are in Piece</i></td>
                                        </tr>
                                        <tr>
                                            <th>Item Type<span class="mandatory">*</span></th>
                                            <th>Item Name</th>
                                            <th>Qty</th>
                                            <th>Vehicle Number</th>
                                        </tr>
                                    </thead>
                                    <tbody id="tbSeizedItemDetails" class="tbviewdet">

                                        @if (Model.SeizedItemsList != null)
                                        {
                                            for (int i = 0; i < Model.SeizedItemsList.Count; i++)
                                            {
                                                <tr>
                                                    <td>
                                                        @Html.HiddenFor(x => Model.SeizedItemsList[i].ID)
                                                        @Html.DropDownListFor(s => Model.SeizedItemsList[i].ItemTypeID, new List<SelectListItem>
                                                    {
                                                        new SelectListItem { Text = "Equipment", Value = "1",Selected=Model.SeizedItemsList[i].ItemTypeID==1?true:false},
                                                        new SelectListItem { Text = "Vehicle", Value = "2",Selected=Model.SeizedItemsList[i].ItemTypeID==2?true:false},
                                                        new SelectListItem { Text = "Forest Produce", Value = "3",Selected=Model.SeizedItemsList[i].ItemTypeID==3?          true:false},
                                                        new SelectListItem { Text = "WildLife Article", Value = "4",Selected=Model.SeizedItemsList[i].ItemTypeID==4?true:false},
                                                        new SelectListItem { Text = "None", Value = "5",Selected=Model.SeizedItemsList[i].ItemTypeID==5?true:false}}, new { id = "ddlItemType_" + i, @class = "previewMode" })
                                                    </td>
                                                    <td>@Html.TextBoxFor(s => Model.SeizedItemsList[i].ItemName, new { id = "txtItemName_" + i, size = "15", @class = "form-control previewMode StopPaste", onchange = "return RestrictSpecialChar2(event);", onkeypress = "return RestrictSpecialChar2(event);", @maxlength = "20" })</td>
                                                    <td>@Html.TextBoxFor(s => Model.SeizedItemsList[i].Qty, new { id = "txtQty_" + i, size = "15", @class = "form-control previewMode StopPaste ", @onkeypress = "AllowNumericOnly(event)", @onchange = "AllowNumericOnly(event)", @maxlength = "15" })</td>
                                                    @if (Model.SeizedItemsList[i].ItemTypeID == 2)
                                                    {
                                                        <td>@Html.TextBoxFor(s => Model.SeizedItemsList[i].VehicleNumber, new { id = "txtVehicleNo_" + i, size = "15", @class = "form-control previewMode StopPaste", onchange = "return RestrictSpecialChar2(event);", onkeypress = "return RestrictSpecialChar2(event);", @maxlength = "20" })</td>
                                                    }
                                                    else
                                                    {
                                            <td></td>}
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr class="rowSkip">
                                                <td colspan="4">No record found.</td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="4">
                                            @*<div class="previewModehide"><a onclick='AddNewRowOD(@Model.ID)' href="javascript:void(0)">Add New Row</a></div>*@
                                            </td>
                                        </tr>
                                    </tfoot>
                                </table>

                            </div>
                        </div>

                        <div class="col-lg-12">
                            <div class="form-group">
                                <label>Upload Seizure Report:<br><i class="small">Upload file up to 8 MB</i></label>
                                @*@Html.TextBox("UploadFile", "", new { @class = "form-control HideInfoForApprover previewMode", id = "fuSeizure", type = "file", multiple = "multiple", onchange = "UploadData(32)", accept = ".pdf,.jpeg,.jpg,.png" })*@
                                <div id="errordivUpload" class="alert-danger1"></div>

                                <div class="tblmax">
                                    <table class="table table-striped table-bordered table-hover gridtable">
                                        <thead>
                                            <tr>
                                                <th>SNo.</th>
                                                <th>FileName</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody id="tblSeizureFiles">
                                            @if (Session["UploadFile"] != null)
                                            {
                                                var cntr = 1;
                                                foreach (var item in ((List<FMDSS.Entity.ViewModel.CommonDocument>)Session["UploadFile"]).Where(x => x.DocumentTypeID == Convert.ToInt32(FMDSS.DocumentType.SeizureReport)))
                                                {
                                                    <tr>
                                                        <td style=display:none;>@item.TempID</td>
                                                        <td>@Html.Raw(cntr++)</td>
                                                        <td><a href="@Url.Content("~/" + item.DocumentPath)" target="_blank"><img src="@Url.Content("~/images/jpeg.png")" width="30" /></a>@item.DocumentName</td>
                                                        <td style="width:5%"><button type=button class='btn btn-danger btn-circle btnDeleteDocument' style=cursor:pointer><i class='fa fa-times'></i></button></td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr class="rowSkip"><td colspan="3">No file Uploaded</td></tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="Areainha">
                                    Latitude:
                                </label>
                                @Html.TextBoxFor(x => x.Latitude, new { @class = "form-control common previewMode StopPaste", title = "", placeholder = "Enter Latitude", maxlength = 50, onkeypress = "AllowNumberOnly(event)", onchange = "AllowNumberOnly(event)", id = "txtLatitude" })
                                <div class="alert-danger1" id="divErrorLatitude">@Html.ValidationMessageFor(x => x.Latitude)</div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="Areainha">
                                    Longitude:
                                </label>
                                @Html.TextBoxFor(x => x.Longitude, new { @class = "form-control common previewMode StopPaste", title = "", placeholder = "Enter Longitude", maxlength = 50, onkeypress = "AllowNumberOnly(event)", onchange = "AllowNumberOnly(event)", id = "txtLongitude" })
                                <div class="alert-danger1" id="divErrorLongitude">@Html.ValidationMessageFor(x => x.Longitude)</div>
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="form-group">
                                @Html.RadioButtonFor(model => model.CompoundStatus, 1, new { @checked = "checked", @class = "previewMode  StopPaste", @id = "CompoundStatus1" })<label> Compounded</label>
                                @Html.RadioButtonFor(model => model.CompoundStatus, 2, new { @class = "previewMode  StopPaste", @id = "CompoundStatus2" })<label>Not Compounded</label>
                                @Html.RadioButtonFor(model => model.CompoundStatus, 3, new { @class = "previewMode  StopPaste", @id = "CompoundStatus3" })<label>Final Report</label>
                            </div>
                        </div>

                        <div class="col-lg-3 Compoundedcls">
                            <div class="form-group">
                                <label for="Areainha">
                                    Compound Amount<span class="mandatory">*</span>
                                </label>
                                @Html.TextBoxFor(x => x.CompoundAmount, new { @class = "form-control common previewMode  StopPaste", title = "", placeholder = "Enter Compound Amount", maxlength = 50, id = "txtCompoundAmount", onkeypress = "AllowNumberOnly(event)", onchange = "AllowNumberOnly(event)" })
                                <div class="alert-danger1 hide" id="errorDivCompoundAmount">Please Enter Compound Amount</div>
                            </div>
                        </div>
                        <div class="col-lg-3 Compoundedcls">
                            <div class="form-group">
                                <label for="Areainha">
                                    Compounding Date<span class="mandatory">*</span>
                                </label>
                                @Html.TextBoxFor(x => x.CompoundingDate, new { @class = "form-control common previewModeDate  StopPaste", title = "", placeholder = "Enter Compounding Date ", maxlength = 50, id = "txtCompoundingDate", @readonly = "readonly" })
                                <div class="alert-danger1 hide" id="errorDivCompoundingDate">Please Enter Compounding Date</div>
                            </div>
                        </div>
                        <div class="col-lg-6 Compoundedcls ItemSeized">
                            <div class="form-group">
                                <label for="Areainha">

                                </label>
                                @Html.RadioButtonFor(model => model.IsMaterialReleased, true, new { id = "MatarialRelized", @class = "previewMode  " })<label> Material Released</label>
                                @Html.RadioButtonFor(model => model.IsMaterialReleased, false, new { @class = "previewMode  " })<label> Material Not Released</label>
                            </div>
                        </div>
                        <div class="col-lg-6 Compoundedcls VehicleType">
                            <div class="form-group">
                                <label for="Areainha">

                                </label>
                                @Html.RadioButtonFor(model => model.IsVehicleReleased, true, new { id = "MatarialRelized", @class = "previewMode  StopPaste" })<label> Vehicle Released</label>
                                @Html.RadioButtonFor(model => model.IsVehicleReleased, false, new { @class = "previewMode  " })<label> Vehicle Not Released</label>
                            </div>
                        </div>
                        <div class="col-lg-6 notCompoundedNewcls hide">
                            <div class="form-group">
                                <label>Not Compounded Status: </label>
                                @Html.DropDownListFor(x => x.NotCompoundedStatus, new List<SelectListItem>
                            {
                                new SelectListItem { Text = "Pending With Department", Value = "PendingWithDepartment"},
                                new SelectListItem { Text = "File in Court", Value = "FileinCourt"}
                            }, new { @class = "form-control previewMode  StopPaste", id = "ddlNotCompoundStatus", onchange = "ShowHideCompoundControls()" })

                            </div>
                        </div>
                        <div class="col-lg-6 notCompoundedcls hide">
                            <div class="form-group">
                                <label for="Areainha">
                                    Name Of Court:
                                </label>
                                @Html.TextBoxFor(x => x.CourtName, new { id = "txtCourtName", @class = "form-control common previewMode  StopPaste", title = "", placeholder = "Enter Name of Court ", maxlength = 50, onchange = "return RestrictSpecialChar2(event);", onkeypress = "return RestrictSpecialChar2(event);" })
                                <div class="alert-danger1 hide" id="errorDivCourtName">Please Enter Name Of Court</div>
                            </div>
                        </div>
                        <div class="col-lg-6 notCompoundedcls hide">
                            <div class="form-group">
                                <label for="Areainha">
                                    Filed On Date:
                                </label>
                                @Html.TextBoxFor(x => x.FileDate, new { id = "txtFileDate", @class = "form-control common previewModeDate", title = "", maxlength = 50, @readonly = "readonly", placeholder = "Enter File Date" })
                                <div class="alert-danger1 hide" id="errorDivFileDate">Please Enter File Date</div>
                            </div>
                        </div>

                        <div class="col-lg-6 notCompoundedcls hide">
                            <div class="form-group">
                                <label for="Areainha">
                                    Court Case No:
                                </label>
                                @Html.TextBoxFor(x => x.CourtCaseNumber, new { @class = "form-control common previewMode", title = "", placeholder = "Enter Court Case No", maxlength = 50, onchange = "return RestrictSpecialChar2(event);", onkeypress = "return RestrictSpecialChar2(event);" })
                                <div class="alert-danger1 hide" id="errorDivCourtCaseNumber">Please Enter Case No</div>
                            </div>
                        </div>

                        <div class="col-lg-6 notCompoundedcls hide">
                            <div class="form-group">
                                <label for="Areainha">
                                    Next Date of Hearing:
                                </label>
                                @Html.TextBoxFor(x => x.NextHearingDate, new { @class = "form-control common previewModeDate", title = "", placeholder = "Enter Place of Offense ", maxlength = 50, id = "txtNextDateOfHearing", @readonly = "readonly" })
                                <div class="alert-danger1 hide" id="errorDivNextDateOfHearing">Please Enter Next Date of Hearing</div>
                            </div>
                        </div>

                        <div class="col-lg-6 finalReportdiv hide">
                            <div class="form-group">
                                <label for="Areainha">
                                    Date of Final Report:
                                </label>
                                @Html.TextBoxFor(x => x.DateOfFinalReport, new { @class = "form-control common previewModeDate", title = "", placeholder = "Enter Date Of Final Report", maxlength = 50, id = "txtDateOfFinalReport", @readonly = "readonly" })
                                <div class="alert-danger1 hide" id="errorDivDateOfFinalReport">Please Enter Date of Final Report</div>
                            </div>
                        </div>

                        <div class="col-lg-6 finalReportdiv hide">
                            <div class="form-group">
                                <label for="Areainha">
                                    Approved by DFO Date:
                                </label>
                                @Html.TextBoxFor(x =>x.DateOfApprovalByDFO, new { @class = "form-control common previewModeDate", title = "", placeholder = "Enter Approval Date By DFO", maxlength = 50, id = "txtApprovedbyDFODate", @readonly = "readonly" })
                                <div class="alert-danger1 hide" id="errorDivApprovedbyDFODate">Please Enter Approved by DFO Date</div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="Areainha">
                                    Special Remarks:<span class="mandatory">*</span>
                                </label>
                                @Html.TextAreaFor(x => x.SpecialRemarks, new { @class = "form-control common previewMode StopPaste", title = "", placeholder = "Special Remarks", maxlength = 500, onkeypress = "RestrictSpecialChar(event)", onchange = "RestrictSpecialChar(event)" })
                                <div class="alert-danger1">@Html.ValidationMessageFor(x => x.SpecialRemarks)</div>
                            </div>
                        </div>


                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Upload Case Details:<br><i class="small">Upload file up to 8 MB</i></label>
                                @*@Html.TextBox("UploadFile", "", new { @class = "form-control HideInfoForApprover previewMode", id = "fuCaseDetails", @type = "file", multiple = "multiple", onchange = "UploadData(31)", accept = ".pdf,.jpeg,.jpg,.png" })*@
                                <div id="errordivUpload" class="alert-danger1"></div>

                                <div class="tblmax">
                                    <table class="table table-striped table-bordered table-hover gridtable">
                                        <thead>
                                            <tr>
                                                <th>SNo.</th>
                                                <th>FileName</th>
                                                <th class="previewModehide">Action</th>
                                            </tr>
                                        </thead>
                                        <tbody id="tblCaseDetailsFiles">
                                            @if (Session["UploadFile"] != null)
                                            {
                                                var cntr = 1;
                                                foreach (var item in ((List<FMDSS.Entity.ViewModel.CommonDocument>)Session["UploadFile"]).Where(x => x.DocumentTypeID == Convert.ToInt32(FMDSS.DocumentType.CaseDetailsEvidence)))
                                                {
                                                    <tr>
                                                        <td style=display:none;>@item.TempID</td>
                                                        <td>@Html.Raw(cntr++)</td>
                                                        <td><a href="@Url.Content("~/" + item.DocumentPath)" target="_blank"><img src="@Url.Content("~/images/jpeg.png")" width="30" /></a>@item.DocumentName</td>
                                                        <td style="width:5%" class="previewModehide"><button type=button class='btn btn-danger btn-circle btnDeleteDocument' style=cursor:pointer><i class='fa fa-times'></i></button></td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr class="rowSkip"><td colspan="3">No file Uploaded</td></tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Status: </label>
                                @Html.DropDownListFor(x => x.Status, new List<SelectListItem>
                            {
                                new SelectListItem { Text = "Pending", Value = "1"},
                                new SelectListItem { Text = "Case In Court", Value = "16"},
                                new SelectListItem { Text = "Closed", Value = "17"}
                            }, new { @class = "form-control previewMode" })

                            </div>
                        </div>

                        <div class="col-lg-12">
                        </div>
                        <div class="col-lg-12" id="btn">
                            @*<button id="btnPreview" type="button" class="btn btn-info" name="Command" value="Preview" title="Preview">
                                <i class="fa fa-check"></i> Preview
                            </button>

                            <button id="btnSubmit" type="submit" class="btn btn-success hide" name="Command" value="Save" title="Submit" onclick="return ValidateForm()">
                                <i class="fa fa-check"></i> Save
                            </button>*@

                            @*<button type="button" name="Command" value="Cancel" class="btn btn-danger" title="Cancel" onclick="BackToList('ShowOffenceDetails')">
                                <i class="fa fa-times fa-fw"></i> Cancel
                            </button>*@
                        </div>
                    </div>
                                    @*}*@
            </div>
        </div>
    </div>
    @Html.Hidden("hdnRootURL", Url.Content("~/"))

</div>

<script src="~/js/jquery.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-ui.js"></script>
<script src="~/Scripts/Controller/Common.js"></script>
<script src="~/js/bootstrap-multiselect.js"></script>
<link href="~/css/bootstrap-multiselect.css" rel="stylesheet" />
<script>
    $('#ddlOffenceCategory').multiselect({
        includeSelectAllOption: true,
        //onChange: function (element, checked) {
        //    var brands = $('#ddlOffenceCategory option:selected');
        //    var selection = [];
        //    $(brands).each(function (index, brand) {
        //        alert(brand);
        //    });

        //    console.log(selection);
        //}
    });

    if ('@Model.ID' != '0' &&  '@Model.OffenceCategory' !='') {
        var oCatList = '@Model.OffenceCategory'.split(',');
        $.each(oCatList, function (i, cntrlVal) {
            $("#ddlOffenceCategory").find("option[value=" + cntrlVal + "]").prop("selected", "selected");
        });
        $("#ddlOffenceCategory").multiselect('refresh');
    }

    $(document).ready(function () {

        $('.onlyletters').keydown(function (e) {
            if (e.shiftKey || e.ctrlKey || e.altKey) {
                e.preventDefault();
            } else {
                var key = e.keyCode;
                if (!((key == 8) || (key == 32) || (key == 46) || (key >= 35 && key <= 40) || (key >= 65 && key <= 90))) {
                    e.preventDefault();
                }
            }
        });
        $(document).on('keydown', '[id^="txtItemName_"]', function (e) {
            if (e.shiftKey || e.ctrlKey || e.altKey) {
                e.preventDefault();
            } else {
                var key = e.keyCode;
                if (!((key == 8) || (key == 32) || (key == 46) || (key >= 35 && key <= 40) || (key >= 65 && key <= 90))) {
                    e.preventDefault();
                }
            }
        });
        $(document).on('paste', '[id^="txtItemName_"]', function (e) {
            e.preventDefault();
        });
       $(document).on('paste', '[id^="txtQty_"]', function (e) {
                e.preventDefault();
       });
       $(document).on('paste', '[id^="txtVehicleNo_"]', function (e) {
               e.preventDefault();
       });
        $('.onlyNumber').keydown(function (e) {
            alert(e.keyCode);
            if (e.shiftKey || e.ctrlKey || e.altKey) {
                e.preventDefault();
            } else {
                var key = e.keyCode;
                if (!((key == 8) || (key == 32) || (key == 46))) {
                    e.preventDefault();
                }
                else if (!((key >= 48 && key <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {
                    e.preventDefault();
                }
            }
        });

        $('#txtFileDate,#txtCompoundingDate,#txtNextDateOfHearing,#txtDateOfFinalReport,#txtApprovedbyDFODate').datepicker({
            dateFormat: GetDatePickerFormat(),
            yearRange: GetYearRange(),
            changeMonth: true,
            changeYear: true,
        });
        //var firdate = $('#txtFIRDate').val();
        //if (firdate != '') {
        //} else {

        //}
        $('#txtFIRDate').datepicker({
            dateFormat: GetDatePickerFormat(),
            yearRange: GetYearRange(),
            changeMonth: true,
            changeYear: true,
            maxDate: new Date()
        });

        if ('@Model.ID' == '0') {
            $('#txtFIRDate').datepicker('setDate', new Date());
            ShowHideCompoundControls();
        }
        else {
            $('#ddlRange').val('@Model.RangeCode');
            BindNaka_Edit('@Model.RangeCode', 'ddlNaka', '@Model.NakaID');
            ShowHideCompoundControls();
        }

        $("input[name='CompoundStatus']").change(function () {
            ShowHideCompoundControls();
        });

        $(document).on('change', 'select[id^="ddlItemType_"]', function () {
            var id = $(this).attr('id');
            var indexId = id.split('_')[1];
            var vehicleItemSelected = $('#' + id).val();

            if (vehicleItemSelected == 2) {
                $('#txtVehicleNo_' + indexId).removeClass('hide');
                $('#txtVehicleNo_' + indexId).show();
            }
            else
                $('#txtVehicleNo_' + indexId).addClass('hide');
            ShowHideCompoundControls();
        });

        $(document).on('click', '.btnDeleteDocument', function () {
            RemoveDocument(this);
        });

        $(document).on('click', '#btnPreview', function () {
            if (confirm('@FMDSS.Globals.Constant.ConfirmMsg')) {
                ApplyResetPreviewMode(0);
            }
        });

        $(document).on('change', 'input[type = "checkbox"][value="1"]', function () {
           // alert('test');

            var idval = $('#ddlOffenceCategory').val();

            if (idval == 1) {
                $('#divWoodCuttingData').removeClass("hide");
            } else {
                var firno = $('#txtFIRNumber').val();
                if ((parseInt($('#txtNoOfTree').val()) > 0 || parseFloat($('#txtVolumeInCubicMetre').val()) > 0)){
                    if ( confirm('On this action, "No of Tree" & "Volume In Cubic Metre" data will get removed, @FMDSS.Globals.Constant.ConfirmMsg')) {
                        $('#divWoodCuttingData').addClass("hide");
                        $('#txtNoOfTree,#txtVolumeInCubicMetre').val('');
                    }
                } else {
                    if (firno.trim() != '') {
                        if ( confirm('On this action, "No of Tree" & "Volume In Cubic Metre" data will get removed, @FMDSS.Globals.Constant.ConfirmMsg')) {
                            $('#divWoodCuttingData').addClass("hide");
                            $('#txtNoOfTree,#txtVolumeInCubicMetre').val('');
                        }
                    } else {
                        $('#divWoodCuttingData').addClass("hide");
                        $('#txtNoOfTree,#txtVolumeInCubicMetre').val('');
                    }
                }
            }
        });
        $("#historyDiv :input").prop("disabled", true);
        $("#historyDiv :button").prop("disabled", true);
    });

    function ShowHideCompoundControls() {
        if ($("input[name='CompoundStatus']:checked").val() == '1') {
            $(".Compoundedcls").removeClass('hide');

            var totSeizedItem = $('#tbSeizedItemDetails').find('tr:not(.rowSkip)').length;
            var vehicleItemSelected = $('#tbSeizedItemDetails').find("select[id^='ddlItemType_']>option[value='2']:selected").length;

            if (totSeizedItem < 1) {
                $(".Compoundedcls.ItemSeized,.Compoundedcls.VehicleType").addClass('hide');
            }
            else {
                $(".Compoundedcls.ItemSeized").removeClass('hide');
                if (vehicleItemSelected >0) {
                    $(".Compoundedcls.VehicleType").removeClass('hide');
                }
               else {
                    $(".Compoundedcls.VehicleType").addClass('hide');
                }

            }

            $(".finalReportdiv").addClass('hide');
            $(".notCompoundedcls").addClass('hide');
            $(".notCompoundedNewcls").addClass('hide');
        }
        else if ($("input[name='CompoundStatus']:checked").val() == '2') {
            $(".notCompoundedNewcls").removeClass('hide');
            $(".finalReportdiv").addClass('hide');
            $(".Compoundedcls").addClass('hide');

            if ($('#ddlNotCompoundStatus').val() == 'FileinCourt') {
                $(".notCompoundedcls").removeClass('hide');
            }
            else {
                $(".notCompoundedcls").addClass('hide');
            }
        }
        else if ($("input[name='CompoundStatus']:checked").val() == "3") {
            $(".finalReportdiv").removeClass('hide');
            $(".notCompoundedcls").addClass('hide');
            $(".notCompoundedNewcls").addClass('hide');
            $(".Compoundedcls").addClass('hide');
        }
    }

    function ApplyResetPreviewMode(resetValue) {
        $('#hdnOffenceCategory').val($(ddlOffenceCategory).val());

        if (resetValue == 0) {
            $('.previewMode').attr('disabled', 'disabled').attr("readonly", "readonly");
            $('.previewModeDate').attr('disabled', 'disabled');
            $('.previewModehide').addClass('hide');
            $('#btnSubmit').removeClass('hide');
            $('#btnPreview').addClass('hide');
        }
        else {
            $('.previewMode').removeAttr('disabled').removeAttr("readonly");
            $('.previewModeDate').removeAttr('disabled');
            $('.previewModehide').removeClass('hide');
        }
    }

    function BindNaka_Edit(parentID, targetCntrlID, selectedValue) {
            var hRootUrl = $('#hdnRootURL').val();
            var strDropdown = '<option value="">--Select--</option>';
            if (parentID != '') {
                $.ajax({
                    type: 'POST',
                    url: hRootUrl + "Common/GetNaka",
                    dataType: 'json',
                    async: true,
                    data: { "parentID": parentID },
                    success: function (response) {
                        if (response.data != null && !response.IsError) {
                            $.each(response.data, function (i, j) {
                                strDropdown += "<option value='" + j.Value + "'>" + j.Text + "</option>";
                            });
                        }
                        $("#" + targetCntrlID).html(strDropdown).val(selectedValue);
                    }
                });
            }
            else {
                $("#" + targetCntrlID).html(strDropdown);
            }
        }
        function GetUserName(cntrl) {
            if (cntrl.value == '1') {
                $('#txtApplicantName').val('@Session["User"]').attr("readonly", "readonly");
            }
            else {
                $('#txtApplicantName').removeAttr('readonly').val('');
            }
        }

        function OnChange_IsWPA(cntrl) {
            if ($(cntrl).is(":checked")) {
                $("#divWPA").removeClass('hide');
                $(cntrl).val("true");
            }
            else {
                $("#divWPA").addClass('hide');
                $(cntrl).val("false");
            }
        }

        function OnChange_IsFA(cntrl) {
            if ($(cntrl).is(":checked")) {
                $(cntrl).val("true");
                $("#divFA").removeClass('hide');
            }
            else {
                $("#divFA").addClass('hide');
                $(cntrl).val("false");
            }
        }

        function AddNewRowOD(offenceDetailsID) {
            var isValid = true;
            var rootURl = $('#hdnRootURL').val();
            $('#tblSeizedItemDetails').find('input[id^="txtItemName_"]').each(function () {
                if ($(this).val() == '') {
                    alert('Please enter current row details first.');
                    isValid = false;
                    return false;
                }
                var id = $(this).attr('id');
                var splIndex = id.split('_')[1];
                var idval = $('#ddlItemType_' + splIndex).val() | 0;
                if (idval == 2) {
                    var vehicleNo = $('#txtVehicleNo_' + splIndex).val();
                    if (vehicleNo.trim() == '' || vehicleNo == null || vehicleNo == 'undefined') {
                        alert('Please enter Vehicle Number.');
                        $('#txtVehicleNo_' + splIndex).focus();
                        isValid = false;
                        return false;
                    }
                }
            });

            if (isValid) {
                var cIndx = $('#tbSeizedItemDetails').find('tr:not(.rowSkip)').length;
                if ($("input[name='CompoundStatus']:checked").val() == '1') {
                    $(".Compoundedcls.ItemSeized").removeClass('hide');
                }

                $.ajax({
                    type: 'GET',
                    data: { "currentRowIndex": cIndx, "offenceDetailsID": offenceDetailsID },
                    url: rootURl + "Offence/AddNewRowForItemSeized",
                    dataType: 'html',
                    success: function (data) {
                        $('#tbSeizedItemDetails').find('.rowSkip').remove();
                        $('#tbSeizedItemDetails').append(data);
                    },
                    error: function (ex) {
                        console.log(ex.error);
                    }
                });
            }
        }

        function RemoveDocument(cntrl) {
            var rootURl = $('#hdnRootURL').val();
            if (confirm("Are you sure you want to delete this?")) {
                var tempID = $(cntrl).closest('tr').find('td:first').text();
                //alert(tempID);
                $.ajax({
                    type: 'POST',
                    url: rootURl + "Offence/RemoveUplodedFile",
                    dataType: 'json',
                    data: { TempID: tempID }
                }).done(function (response) {
                    if (!response.isError) {
                        $(cntrl).closest('tr').remove();
                    }
                    alert(response.returnMsg);
                });
            }
        }

        function RemoveSpecificDocument(tableID) {
            var rowIndx = $('#' + tableID).find('tr:not(.rowSkip)').length;
            if (rowIndx > 0) {
                var rootURl = $('#hdnRootURL').val();
                var tempID = $('#' +tableID).find('tr>td:first').text();
                $.ajax({
                    type: 'POST',
                    url: rootURl + "Offence/RemoveUplodedFile",
                    dataType: 'json',
                    data: { TempID: tempID }
                }).done(function (response) {
                    if (!response.isError) {
                        $('#' + tableID).find('tr').remove();
                    }
                });
            }
        }

        function UploadData(docType) {
            var rootURl = $('#hdnRootURL').val();
            if (window.FormData !== undefined) {
                var fileUpload = null;
                var cntrlID = "";
                var cntrlTblID = '';
                var isValid = true;
                switch (docType) {
                    case 30: fileUpload = $("#fuFIR").get(0);
                        cntrlID = "fuFIR";
                        cntrlTblID = "tblFIREvidenceFiles";
                        RemoveSpecificDocument(cntrlTblID); break;
                    case 31: fileUpload = $("#fuCaseDetails").get(0);
                        cntrlID = "fuCaseDetails";
                        cntrlTblID = "tblCaseDetailsFiles"; break;
                    case 32: fileUpload = $("#fuSeizure").get(0);
                        cntrlID = "fuSeizure";
                        cntrlTblID = "tblSeizureFiles"; break;
                    default:
                        isValid = false;
                        break;
                }
                if (isValid) {
                    var files = fileUpload.files;
                    var fileData = new FormData();
                    for (var i = 0; i < files.length; i++) {
                        fileData.append(files[i].name, files[i]);
                        fileData.append("docTypeID", docType);
                    }
                    if ($('#' + cntrlID).val() != '') {
                        var size = GetFileSize(cntrlID);

                        if (size > 8) {
                            alert(size + '::You can upload file up to 8 MB');
                            return false;
                        }
                        else {
                            var rowdata = "";

                            $.ajax({
                                url: rootURl + "Offence/UploadFiles",
                                type: "POST",
                                contentType: false, // Not to set any content header
                                processData: false, // Not to process data
                                data: fileData,
                                success: function (response) {
                                    alert(response.returnMsg);
                                    if (!response.isError) {
                                        $("#" + cntrlTblID).empty();
                                        var totalRows = $("#" + cntrlTblID).find('tr').length;
                                        if (response.data.length > 0) {
                                            $.each(response.data, function (i, item) {
                                                rowdata += "<tr><td style=display:none;>" + item.TempID + "</td><td>" + (i + 1) + "</td><td><a href='" + rootURl + item.DocumentPath + "' target='_blank'><img src='../images/jpeg.png' Width='30' /></a>" + item.DocumentName + "</td><td style='width:5%'>" + "<button type=button class='btn btn-danger btn-circle btnDeleteDocument' style=cursor:pointer ><i class='fa fa-times'></i></button>" + "</td></tr>";
                                            });
                                        }
                                        $("#" + cntrlTblID).append(rowdata);
                                    }
                                },
                                error: function (err) {
                                    alert(err.statusText);
                                }
                            });
                        }
                    }
                    else { alert("Select file to upload"); }
                }
                else {
                    alert("Please select evidence type");
                    $('#' + cntrlID).val(''); return false;
                }
            } else {
                alert("FormData is not supported.");
            }
        }

        function GetFileSize(fileid) {
            try {
                var fileSize = 0;
                fileSize = $("#" + fileid)[0].files[0].size //size in kb
                fileSize = fileSize / 1048576; //size in mb
                return fileSize;
            }
            catch (e) {
                alert("Error is :" + e);
            }
        }

        function ValidateForm() {
            ApplyResetPreviewMode(1);
            var sIIndx = $('#tbSeizedItemDetails').find('tr:not(.rowSkip)').length;
            var feIndx = $('#tblFIREvidenceFiles').find('tr:not(.rowSkip)').length;
            var isValid = true;

            if ($("input[name='CompoundStatus']:checked").val() == "1") {
                if ($.isEmptyObject($('#txtCompoundAmount').val())) {
                    $('#errorDivCompoundAmount').removeClass("hide");
                    var isValid = false;
                }
                else {
                    $('#errorDivCompoundAmount').addClass("hide");
                }
                if ($.isEmptyObject($('#txtCompoundingDate').val())) {
                    $('#errorDivCompoundingDate').removeClass("hide");
                    var isValid = false;
                }
                else {
                    $('#errorDivCompoundingDate').addClass("hide");
                }
            }

            if (isValid) {
                if (feIndx == 0) {
                    alert('Please upload copy of FIR.');
                    return false;
                }
                else if (sIIndx > 0) {
                    $('#tblSeizedItemDetails').find('input[id^="txtItemName_"]').each(function () {
                        if ($(this).val() == '') {
                            alert('Please enter current row details first.');
                            isValid = false;
                            return;
                        }
                        var id = $(this).attr('id');
                        var splIndex = id.split('_')[1];
                        var idval = $('#ddlItemType_' + splIndex).val() | 0;
                        if (idval == 2) {
                            var vehicleNo = $('#txtVehicleNo_' + splIndex).val();
                            if (vehicleNo.trim() == '' || vehicleNo == null || vehicleNo == 'undefined') {
                                alert('Please enter Vehicle Number.');
                                $('#txtVehicleNo_' + splIndex).focus();
                                isValid = false;
                                return false;
                            }
                        }
                    });
                }
            }
            if (isValid == false)
                return isValid;
            var categoryName = $('#ddlOffenceCategory').find(":selected").text();
            if (categoryName.trim() == '' || categoryName == null || categoryName == 'undefined') {
                alert('Please select Offence Category.');
                isValid = false;
                return isValid;
            }

            var compStatus = $("input[name='CompoundStatus']:checked").val();
            //alert(compStatus);
            var dtFIRDate = $('#txtFIRDate').val();
            var splF = dtFIRDate.split(' ')[0];
            if ($('#CompoundStatus1').is(':checked') && compStatus == 1) {
                var dtCompounding = $('#txtCompoundingDate').val();
                if (dtCompounding == 'undefined' || dtCompounding == null || dtCompounding == '') {
                    alert('Please enter Compounding date.');
                    isValid = false;
                    return isValid;
                }


                var splC = dtCompounding.split(' ')[0];

                var d1 = new Date(splF.split("/").reverse().join("-"));
                var d2 = new Date(splC.split("/").reverse().join("-"));
                if (d1 > d2) {
                    alert('Please enter Compounding date greater than FIR date.');
                    isValid = false;
                    return isValid;
                }
            }
            var dtFR = $('#txtDateOfFinalReport').val();

            if ($('#CompoundStatus3').is(':checked') && compStatus == 3) {
                if (dtFR == 'undefined' || dtFR == null || dtFR=='')
                {
                    alert('Please enter Date of Final Report.');
                    isValid = false;
                    return isValid;
                }
                var splC = dtFR.split(' ')[0];

                var d11 = new Date(splF.split("/").reverse().join("-"));
                var d22 = new Date(splC.split("/").reverse().join("-"));
                if (d11 > d22) {
                    alert('Please enter Date of Final Report date greater than FIR date.');
                    isValid = false;
                    return isValid;
                }
            }
            var dtADFO = $('#txtApprovedbyDFODate').val();
            //alert(dtADFO);
            if ($('#CompoundStatus3').is(':checked')  && compStatus == 3) {
                if (dtADFO == 'undefined' || dtADFO == null || dtADFO == '') {
                    alert('Please enter DFO date.');
                    isValid = false;
                    return isValid;
                }

                var splC = dtADFO.split(' ')[0];

                var d111 = new Date(splF.split("/").reverse().join("-"));
                var d222 = new Date(splC.split("/").reverse().join("-"));
                if (d111 > d222) {
                    alert('Please enter Approved by DFO date greater than FIR date.');
                    isValid = false;
                    return isValid;
                }
            }


            isValid = Validate()

            return isValid;
        }

        function ValidateFiles(oForm) {
            var _validFileExtensions = [".pdf",".jpg", ".jpeg",".png"];
            var arrInputs = oForm.getElementsByTagName("input");
            for (var i = 0; i < arrInputs.length; i++) {
                var oInput = arrInputs[i];
                if (oInput.type == "file") {
                    var sFileName = oInput.value;
                    if (sFileName.length > 0) {
                        var blnValid = false;
                        for (var j = 0; j < _validFileExtensions.length; j++) {
                            var sCurExtension = _validFileExtensions[j];
                            if (sFileName.substr(sFileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase()) {
                                blnValid = true;
                                break;
                            }
                        }
                        if (!blnValid) {
                            alert("Sorry, Only Allowed formate is as : " + _validFileExtensions.join(", "));
                            return false;
                        }
                    }
                }
            }
        }
        //$(document).on("submit", "frmAddOffence", function (e) {
        //    e.preventDefault();
        //    alert('it works!');
        //    return false;
        //});
</script>
<style>
    select[multiple].multi-ddl-height-102 {
        height: 102px;
    }

    select[multiple].multiselect-container > li > a > label.checkbox, .multiselect-container > li > a > label.radio {
        background: #fff;
        color: #555;
    }
</style>
