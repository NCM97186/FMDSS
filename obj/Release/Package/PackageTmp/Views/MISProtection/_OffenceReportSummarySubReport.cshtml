@model IEnumerable<FMDSS.Entity.Protection.ViewModel.ViewOffenceDetails>

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button id="btnClose" type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h4 class="modal-title" id="myModalLabel" style="text-align:center">
                Offence Details
            </h4>
        </div>
        <div class="panel panel-default">
            <div class="panel-heading">
                <strong>Offence Summary Sub Details</strong>
            </div>
            <div class="panel-body">
                <div id="tbl" class="table-responsive">
                    <div class="col-lg-4 padding-bottom" style="float:right;"><button class="btn btn-info pull-right" onclick="tablesToExcel(['tblOffenceSubReport'], ['tblOffenceSubReport'], 'OffenceSubReport', 'Excel')">Export to Excel</button></div>
                    <table class="table table-striped table-bordered table-hover" id="tblOffenceSubReport">
                        <thead>
                            <tr>
                                <th>SNO</th>
                                <th>Range Name</th>
                                <th>Naka Name</th>
                                <th>FIR Number</th>
                                <th>FIR Date</th>
                                <th>Request ID</th>
                                <th>Offender Name</th>
                                <th>Offender Address</th>
                                <th>Offence Description</th>
                                <th>Investigator Officer</th>
                                <th>Total Item Seized</th>
                                <th>Compound Amount</th>
                                <th>Court Name</th>
                                <th>Court Case No</th>
                                <th>Next Hearing Date</th>
                                <th>Date Of Final Report</th>
                                <th>Special Remarks</th>
                                <th>Status</th>
                            </tr>
                            @if (Model.Count() > 0)
                            {
                                foreach (var item in Model)
                                {
                                    <tr>
                                        <td>@Html.DisplayFor(model => item.RowID)</td>
                                        <td>@Html.DisplayFor(model => item.RANGE_NAME)</td>
                                        <td>@Html.DisplayFor(model => item.NakaName)</td>
                                        <td>@Html.DisplayFor(model => item.FIRNumber)</td>
                                        <td>@Html.DisplayFor(model => item.FIRDate)</td>
                                        <td>@Html.DisplayFor(model => item.OffenceDetailsID)</td>
                                        <td>@Html.DisplayFor(model => item.OffenderName)</td>
                                        <td>@Html.DisplayFor(model => item.OffenderAddress)</td>
                                        <td>@Html.DisplayFor(model => item.OffenceDescription)</td>
                                        <td>@Html.DisplayFor(model => item.InvestigatorOfficer)</td>
                                        <td>@Html.DisplayFor(model => item.TotalItemSeized)</td>
                                        <td>@Html.DisplayFor(model => item.CompoundAmount)</td>
                                        <td>@Html.DisplayFor(model => item.CourtName)</td>
                                        <td>@Html.DisplayFor(model => item.CourtCaseNumber)</td>
                                        <td>@Html.DisplayFor(model => item.NextHearingDate)</td>
                                        <td>@Html.DisplayFor(model => item.DateOfFinalReport)</td>
                                        <td>@Html.DisplayFor(model => item.SpecialRemarks)</td>
                                        <td>@Html.DisplayFor(model => item.StatusName)</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="17">No record found.</td>
                                </tr>
                            }
                        </thead>
                    </table>
                </div>
            </div>
        </div>
        <div class="modal-footer" id="fot-f">
            <div id="btn" class="col-lg-12">

                <button id="btnCancel" name="button" class="btn btn-danger" type="button" value="Cancel" data-dismiss="modal" style="width: auto">
                    <i class="fa fa-times fa-fw"></i> Close
                </button>

            </div>
        </div>
    </div>
</div>

<script type="text/javascript" src="~/js/jquery.min.js"></script>
<script type="text/javascript">
    $.noConflict(true);
    var tablesToExcel = (function () {
        var uri = 'data:application/vnd.ms-excel;base64,'
            , tmplWorkbookXML = '<?xml version="1.0"?><?mso-application progid="Excel.Sheet"?><Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet">'
                + '<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office"><Author>Axel Richter</Author><Created>{created}</Created></DocumentProperties>'
                + '<Styles>'
                + '<Style ss:ID="Currency"><NumberFormat ss:Format="Currency"></NumberFormat></Style>'
                + '<Style ss:ID="Date"><NumberFormat ss:Format="Medium Date"></NumberFormat></Style>'
                + '</Styles>'
                + '{worksheets}</Workbook>'
            , tmplWorksheetXML = '<Worksheet ss:Name="{nameWS}"><Table>{rows}</Table></Worksheet>'
            , tmplCellXML = '<Cell{attributeStyleID}{attributeFormula}><Data ss:Type="{nameType}">{data}</Data></Cell>'
            , base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }
            , format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) }
        return function (tables, wsnames, wbname, appname) {
            var ctx = "";
            var workbookXML = "";
            var worksheetsXML = "";
            var rowsXML = "";
            console.log(tables);
            var getFilterFromDate = document.getElementById('txtFromDate').value;
            var getFilterToDate = document.getElementById('txtToDate').value;
            wbname = wbname + "FromDate:-" + getFilterFromDate + "- ToDate:-" + getFilterToDate + '.xls';

            for (var i = 0; i < tables.length; i++) {
                if (!tables[i].nodeType) tables[i] = document.getElementById(tables[i]);
                for (var j = 0; j < tables[i].rows.length; j++) {
                    rowsXML += '<Row>'
                    for (var k = 0; k < tables[i].rows[j].cells.length; k++) {
                        var dataType = tables[i].rows[j].cells[k].getAttribute("data-type");
                        var dataStyle = tables[i].rows[j].cells[k].getAttribute("data-style");
                        var dataValue = tables[i].rows[j].cells[k].getAttribute("data-value");
                        dataValue = (dataValue) ? dataValue : tables[i].rows[j].cells[k].innerHTML.trim();
                        if (dataValue.indexOf('button') == -1) {
                            var dataFormula = tables[i].rows[j].cells[k].getAttribute("data-formula");
                            dataFormula = (dataFormula) ? dataFormula : (appname == 'Calc' && dataType == 'DateTime') ? dataValue : null;
                            ctx = {
                                attributeStyleID: (dataStyle == 'Currency' || dataStyle == 'Date') ? ' ss:StyleID="' + dataStyle + '"' : ''
                                , nameType: (dataType == 'Number' || dataType == 'DateTime' || dataType == 'Boolean' || dataType == 'Error') ? dataType : 'String'
                                , data: (dataFormula) ? '' : dataValue
                                , attributeFormula: (dataFormula) ? ' ss:Formula="' + dataFormula + '"' : ''
                            };
                            rowsXML += format(tmplCellXML.trim(), ctx);
                        }
                    }
                    rowsXML += '</Row>'

                }
                ctx = { rows: rowsXML, nameWS: wsnames[i] || 'Sheet' + i };
                worksheetsXML += format(tmplWorksheetXML, ctx);
                rowsXML = "";
            }

            ctx = { created: (new Date()).getTime(), worksheets: worksheetsXML };
            workbookXML = format(tmplWorkbookXML, ctx);

            console.log(workbookXML);

            var link = document.createElement("A");
            link.href = uri + base64(workbookXML);
            link.download = wbname || 'OffenceSubDetails.xls';
            link.target = '_blank';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link); 
        }
    })();
</script>
<style>
    .padding-bottom {
        padding-bottom: 7px;
    }  
    table {
        display: block;
        overflow: auto;
        white-space: nowrap;
        max-height: 450px;
    }
</style>
