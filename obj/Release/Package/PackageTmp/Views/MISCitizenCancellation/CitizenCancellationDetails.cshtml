@model FMDSS.Models.MIS.CitizenWildLifeCancellationViewModel
@{
    ViewBag.Title = "CitizenCancellationDetails";
}

<div class="row">
    <div class="col-lg-9 pad">
        <h1 class="page-header"><span>Report : Citizen Wild Life Ticket Booking Cancellation</span></h1>
    </div>

    @using (Html.BeginForm("CitizenCancellationDetails", "MISCitizenCancellation", FormMethod.Post))
    {

        <div class="col-lg-9">
            <div class="panel panel-default">
                <div class="panel-body" id="divRequestSec">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label>Request ID:</label>
                            @Html.TextBoxFor(model => model.CWLTicketBookingCancellationModel.RequestID, new { @class = "form-control common ", id = "txtRequestID", value = "" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label>Emitra Status:</label>
                            @Html.DropDownListFor(m => m.CWLTicketBookingCancellationModel.EmitraStatus, new SelectList(Model.EmitraStatusList, "IDNo", "Name"), "All", new { @class = "form-control common", id = "ddlEmitraStatus" })

                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label>From Date:<span class="mandatory">*</span></label>
                            @Html.TextBoxFor(model => model.CWLTicketBookingCancellationModel.FromDate, new { @class = "form-control common ", id = "FromDate" })
                            @Html.ValidationMessageFor(m => m.CWLTicketBookingCancellationModel.FromDate)
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label>To Date:<span class="mandatory">*</span></label>
                            @Html.TextBoxFor(model => model.CWLTicketBookingCancellationModel.ToDate, new { @class = "form-control common ", id = "ToDate" })
                            @Html.ValidationMessageFor(m => m.CWLTicketBookingCancellationModel.ToDate)

                        </div>
                    </div>

                    <div id="btn" class="col-lg-12">

                        <button type="submit" class="btn btn-success" name="Command" value="Save" id="btn_submit1">
                            <i class="fa fa-check"></i> Submit
                        </button>
                        <button type="button" class="btn btn-warning" id="btn_reset" onclick="Reset()">
                            <i class="fa fa-circle-o-notch fa-fw"></i> Reset
                        </button>

                    </div>

                </div>
            </div>
            @if (Model.TicketBookingCancellationList != null && Model.TicketBookingCancellationList.Count > 0)
            {
                <div class="col-lg-4 pull-right" id="place">
                    <button type="button" class="btn btn-info pull-right" onclick="tablesToExcel(['dataTables-example'], ['dataTables-example'], 'TicketCancellaionReport', 'Excel')">Export to Excel</button>
                </div>
                <br /><br /><br />
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="dataTable_wrapper">
                                <div class="table-responsive">
                                    <table class="table table-striped table-bordered table-hover table-responsive gridtable" id="dataTables-example">
                                        <thead>
                                            <tr>
                                                <th>Request Id</th>
                                                <th>Emitra Transaction ID</th>
                                                <th>Emitra Status</th>
                                                <th>Ticket Amount</th>
                                                <th>Service Charge</th>
                                                <th>Refund Amount</th>
                                                <th style="width:55px;">SSOId</th>
                                                <th>Entered On</th>
                                            </tr>
                                        </thead>
                                        <tbody> 
                                            @foreach (var item in Model.TicketBookingCancellationList)
                                            {
                                                <tr>
                                                    <td data-toggle="modal" data-target="#myModal" style="cursor:pointer" onclick="return ShowDetails('@item.ID')"><a href="javascript:void(0)">@Html.DisplayFor(model => item.RequestID)</a></td>
                                                    <td>@Html.DisplayFor(model => item.EmitraTransactionID)</td>
                                                    <td>@Html.DisplayFor(model => item.EmitraStatusName)</td>
                                                    <td>@Html.DisplayFor(model => item.TicketAmount)</td>
                                                    <td>@Html.DisplayFor(model => item.ServiceCharge)</td>
                                                    <td>@Html.DisplayFor(model => item.RefundAmount)</td>
                                                    <td>@Html.DisplayFor(model => item.SSOId)</td>
                                                    <td>@Html.DisplayFor(model => item.EnteredOn)</td>
                                                </tr>
                                            }

                                        </tbody>
                                    </table>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {

                <div class="form-group error table-bordered">No record found.</div>
            }
        </div>
    }
</div>

<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog modal-lg" id="modelPlace">
        <!-- Modal content-->
    </div>
</div>

<script>
    $(document).ready(function () {

        $('#dataTables-example').DataTable({
            responsive: true
        });

    });

    $(document).ready(function () {
        jQuery(function ($) {
            $.validator.addMethod('date',
            function (value, element) {
                if (this.optional(element)) {
                    return true;
                }

                var ok = true;
                try {
                    $.datepicker.parseDate('dd/mm/yy', value);
                }
                catch (err) {
                    ok = false;
                }
                return ok;
            });
        });

        var currentYear = (new Date).getFullYear();
        var Range = '2008:' + (currentYear + 1)

        $("#FromDate,#ToDate").datepicker({ maxDate: new Date(), yearRange: Range, dateFormat: 'dd/mm/yy', changeMonth: true, changeYear: true, onClose: function (dateText, inst) { $("[id$=auto]").focus(); } });
        var currentDate = new Date();
        //$("#FromDate, #ToDate").datepicker("setDate", currentDate);

        $("#FromDate").change(function () {
            var str1 = $("#FromDate").val();
            var str2 = $("#ToDate").val();

            var d1 = $("#FromDate").val().split('/'), d2 = $("#ToDate").val().split('/');
            d1 = new Date(+d1[2], parseInt(d1[1], 10) - 1, parseInt(d1[0], 10));
            d2 = new Date(+d2[2], parseInt(d2[1], 10) - 1, parseInt(d2[0], 10));

            if (new Date(d1) > new Date(d2)) {
                $("#ToDate").val('');
            }
        });

        $(document).on('keypress', '#FromDate,#ToDate', function (event) {

            event.preventDefault();
            return false;

        });

        $("#ToDate").change(function () {
            var str1 = $("#FromDate").val();
            var str2 = $("#ToDate").val();

            var d1 = $("#FromDate").val().split('/'), d2 = $("#ToDate").val().split('/');
            d1 = new Date(+d1[2], parseInt(d1[1], 10) - 1, parseInt(d1[0], 10));
            d2 = new Date(+d2[2], parseInt(d2[1], 10) - 1, parseInt(d2[0], 10));

            if (new Date(d1) > new Date(d2)) {
                $("#ToDate").val('');
                alert('To Date must be greater than From Date');
            }
        });
    })

    function ShowDetails(id) {
        $.ajax({
            type: 'GET',
            url: "../MISCitizenCancellation/GetCitizenWildLifeTicketbookingCancellation?id=" + id,
            dataType: 'html',
            success: function (data) {
                $('#modelPlace').html(data);
            },
            error: function (ex) {
                //alert(ex.error);
            }
        });

    };

    function Reset() {
        $('#txtRequestID').val("");
        $('#divRequestSec').find('select').val("");
        $("#FromDate, #ToDate").datepicker("setDate", new Date());
    }

</script>
<script type="text/javascript">
    $.noConflict(true);
    var tablesToExcel = (function () {
        var uri = 'data:application/vnd.ms-excel;base64,'
        , tmplWorkbookXML = '<?xml version="1.0"?><?mso-application progid="Excel.Sheet"?><Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet">'
          + '<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office"><Author>Axel Richter</Author><Created>{created}</Created></DocumentProperties>'
          + '<Styles>'
          + '<Style ss:ID="Currency"><NumberFormat ss:Format="Currency"></NumberFormat></Style>'
          + '<Style ss:ID="Date"><NumberFormat ss:Format="Medium Date"></NumberFormat></Style>'
          + '</Styles>'
          + '{worksheets}</Workbook>'
        , tmplWorksheetXML = '<Worksheet ss:Name="{nameWS}"><Table>{rows}</Table></Worksheet>'
        , tmplCellXML = '<Cell{attributeStyleID}{attributeFormula}><Data ss:Type="{nameType}">{data}</Data></Cell>'
        , base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }
        , format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) }
        return function (tables, wsnames, wbname, appname) {
            var ctx = "";
            var workbookXML = "";
            var worksheetsXML = "";
            var rowsXML = "";
            var getFilterFromDate = document.getElementById('FromDate').value;
            var getFilterToDate = document.getElementById('ToDate').value;
            wbname = wbname + "FromDate:-" + getFilterFromDate + "- ToDate:-" + getFilterToDate + '.xls';


            for (var i = 0; i < tables.length; i++) {
                if (!tables[i].nodeType) tables[i] = document.getElementById(tables[i]);
                console.log(tables[i]);
                if (tables[i].rows != null && tables[i].rows != undefined) {
                    for (var j = 0; j < tables[i].rows.length; j++) {
                        rowsXML += '<Row>'
                        for (var k = 0; k < tables[i].rows[j].cells.length; k++) {
                            var dataType = tables[i].rows[j].cells[k].getAttribute("data-type");
                            var dataStyle = tables[i].rows[j].cells[k].getAttribute("data-style");
                            var dataValue = tables[i].rows[j].cells[k].getAttribute("data-value");
                            dataValue = (dataValue) ? dataValue : tables[i].rows[j].cells[k].innerHTML.trim();
                            if (dataValue.indexOf('button') == -1) {
                                var dataFormula = tables[i].rows[j].cells[k].getAttribute("data-formula");
                                dataFormula = (dataFormula) ? dataFormula : (appname == 'Calc' && dataType == 'DateTime') ? dataValue : null;
                                ctx = {
                                    attributeStyleID: (dataStyle == 'Currency' || dataStyle == 'Date') ? ' ss:StyleID="' + dataStyle + '"' : ''
                                       , nameType: (dataType == 'Number' || dataType == 'DateTime' || dataType == 'Boolean' || dataType == 'Error') ? dataType : 'String'
                                       , data: (dataFormula) ? '' : dataValue
                                       , attributeFormula: (dataFormula) ? ' ss:Formula="' + dataFormula + '"' : ''
                                };
                                rowsXML += format(tmplCellXML.trim(), ctx);
                            }
                        }
                        rowsXML += '</Row>'

                    }
                }
                ctx = { rows: rowsXML, nameWS: wsnames[i] || 'Sheet' + i };
                worksheetsXML += format(tmplWorksheetXML, ctx);
                rowsXML = "";
            }

            ctx = { created: (new Date()).getTime(), worksheets: worksheetsXML };
            workbookXML = format(tmplWorkbookXML, ctx);

            console.log(workbookXML);

            var link = document.createElement("A");
            link.href = uri + base64(workbookXML);
            link.download = wbname || 'CitizenCancellationReport.xls';
            link.target = '_blank';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    })();
</script>
<script type="text/javascript" src="~/js/jquery.min.js"></script>
<script src="~/Scripts/jquery-ui.js"></script>
<script src="~/Scripts/jquery.validate.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js" type="text/javascript"></script>

<style type="text/css">
    .field-validation-error {
        color: #ff0000;
    }

    .field-validation-valid {
        display: none;
    }

    .input-validation-error {
        border: 1px solid #ff0000;
        background-color: #ffeeee;
    }

    .validation-summary-errors {
        font-weight: bold;
        color: #ff0000;
    }

    .validation-summary-valid {
        display: none;
    }

    .error {
        color: #ff0000;
        padding:4px 7px;
    }
</style>
