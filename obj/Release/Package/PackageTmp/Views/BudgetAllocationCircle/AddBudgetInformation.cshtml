@model FMDSS.Models.ForesterDevelopment.BudgetAllocation.ViewModel.View_BudgetAllocation_Circle

@{
    ViewBag.Title = "BudgetAllocationTocircle";
    Layout = "~/Views/Shared/Forestlayout.cshtml";
}

<style>
    .hide {
        display: none;
    }

    .center {
        margin-top: 50%;
    }
</style>
<script src="~/js/jquery.min.js"></script>
<script type="text/javascript">

    function ViewFile(reqFor, reqType, code, service) {
        //reqFor="Division OR Circle OR HQ OR Santatury"
        //reqType="Forest" Or "Wildlife"
        //Code= Circle Code Or Division Code
        var strname = "AmritaDevi";
        var ssoid = "@Convert.ToString(Session["SSOID"])";
        $("#ssoId").val(ssoid);
        $("#reqFor").val(reqFor);
        $("#reqType").val(reqType);
        $("#code").val(code);
        $("#Service").val(service); //Service Means Allocation Or Expenditure

        var actionUrl = "@System.Web.Configuration.WebConfigurationManager.AppSettings["GisBugetPath"].ToString()";
        document.getElementById("form11").action = actionUrl;
        document.getElementById("form11").submit();

    }

    function ShowPopUp(ID) {
        if (ID != null && ID != '') {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetAllocationCircleListLog", "BudgetAllocationCircle")',
                dataType: 'json',
                data: { Id: ID },
                success: function (data) {
                    console.log(data);
                    var tbl = "";
                    $("#logTbl tbody").empty();
                    var amount = 0;
                    var Extraamount = 0;
                    var Allocateamount = 0;
                    console.log(data);
                    $.each(data, function (index, val) {
                        amount = val.TotalAmount;

                        if (data.length == 1) {// It means HQ level perposal allocated and extra amount fill itsself
                            Extraamount = val.ExtraAllocatedAmount;
                            Allocateamount = val.AllocatedAmountDistribute;
                        }
                        else {
                            if (parseFloat(val.ExtraAllocatedAmount) > 0) {
                                Extraamount = val.ExtraAllocatedAmount;
                                Allocateamount = 0;
                            }
                            else {
                                Extraamount = 0;
                                Allocateamount = val.AllocatedAmountDistribute;
                            }
                        }
                        tbl = tbl + "<tr>"
                        tbl = tbl + "<td>" + val.OfficeName + "</td><td>" + val.Ssoid + "</td><td>" + val.CreatedDate + "</td><td>" + val.AllocatedAmountCircleLevel + "</td><td>" + Allocateamount + "</td><td>" + Extraamount + "</td>";
                        tbl = tbl + "</tr>"

                    });
                    if (data != null) {
                        tbl = tbl + '<tr><tr><td colspan="4" style="text-align: right;color: red;font-size: 20px;">Total</td><td colspan="2" style="color: red;font-size: 20px;">' + amount + ' Laks</td></tr>';
                    }
                    $("#logTbl tbody").append(tbl);
                    $("#modal-window").modal('show');
                },
                traditional: true,
                error: function (data) { console.log(data) }
            });
        }

    }

</script>
<!--GIS Data Post 22-04-2016-->
<form id="form11" name="form11" method="post">
    <input type="hidden" id="portalid" name="portalid" value="rajcomp123" />
    <input type="hidden" id="ssoId" name="ssoId" value="" />
    <input type="hidden" id="reqFor" name="reqFor" value="" />
    <input type="hidden" id="reqType" name="reqType" value="" />
    <input type="hidden" id="Service" name="Service" value="" />
    <input type="hidden" id="code" name="code" value="" />

    @*<input type="hidden" id="returnurl1" name="returnurl" value="http://localhost:17105/AmritaDeviAward/getGISData" />*@
    @*<input type="hidden" id="returnurl" name="returnurl" value="" />*@
</form>

<div id="page-wrapper-inn">

    @*@if (TempData["Message"] != null)
        {

            <script type="text/javascript" language="javascript">
                alert('@TempData["Message"]');
            </script>
        }*@
    @Html.Partial("_PartialBudgetLink")
    <div class="col-lg-12 pad">
        <div class="col-lg-10">
            <h1 class="page-header">Budget Allocation (@Session["User"].ToString())</h1>
        </div>
        <div class="col-lg-2">
            <button type="button" class="btn btn-success confirm-toggle" name="Command" value="0" id="AddMaster">
                <i class="fa fa-check"></i> Show Master
            </button>
        </div>
    </div>
    <div class="col-lg-12 pad">
        @Html.Raw(TempData["Message"])
    </div>

    <div class="row">
        <div class="panel panel-default col-lg-12">
            <div id="tbl" class="table-responsive">

                <table class="table table-striped table-bordered table-hover gridtable" id="dataTables-example">
                    <thead>
                        <tr>
                            <th>
                                S.NO
                            </th>
                            <th>
                                Financial Year
                            </th>
                            <th>
                                Scheme
                            </th>
                            <th>
                                Budget/Sub Budget Head
                            </th>
                            <th>
                                Activity/Sub Activity
                            </th>
                            <th>
                                Circle / Division / HQ / Sanctuary
                            </th>
                            <th>
                                Circle / Division / HQ / Sanctuary
                            </th>
                            <th>
                                Total Amount (lakh)
                            </th>
                            <th>
                                Allocated Amount (lakh)
                            </th>
                            <th>
                                GIS
                            </th>
                            <th>
                                Action
                            </th>
                            <th>
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @{int i = 0;}
                        @foreach (var item in ViewData["BudgetAllocationCircleList"] as IEnumerable<FMDSS.Models.ForesterDevelopment.BudgetAllocation.ViewModel.View_BudgetAllocation_Circle>)
                        {

                            <tr style="color:@item.Colors">
                                <td>
                                    @{i++;}
                                    @i
                                </td>
                                <td>
                                    @*BUDGETALLOCATION-@item.BudgetHeadAllocationID*@
                                    @item.FinancialYear
                                </td>
                                <td>
                                    @Html.DisplayFor(model => item.SchemeName) <br /> ( @item.IsCoreOrBuffer )
                                </td>
                                <td>
                                    @Html.DisplayFor(model => item.BudgetHead) / @item.SubBudgetHead
                                </td>
                                <td>
                                    @Html.DisplayFor(model => item.ActivityName) / @item.SubActivityName
                                </td>
                                <td>
                                    @Html.DisplayFor(model => item.ISCircleDivision)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => item.CIRCLE_NAME) / @item.Division / @item.SanctuaryName
                                </td>
                                <td>
                                    @Html.DisplayFor(model => item.TotalAmount)
                                </td>
                                <td>
                                    @{
                                        //decimal AllocatedAmount = item.AllocatedAmount + item.ExtraAllocatedAmount;
                                       decimal AllocatedAmount = item.AllocatedAmount;
                                    }
                                    @*@Html.DisplayFor(model => item.AllocatedAmount)*@
                                    <a href="#" onclick="ShowPopUp('@item.ID')">@AllocatedAmount</a>
                                </td>
                                <td>
                                    @{
                                        string Code = item.ISCircleDivision.ToLower() == "circle" ? item.CIRCLE_CODE : item.ISCircleDivision.ToLower() == "division" ? item.Div_Code : item.ISCircleDivision.ToLower() == "hq" ? item.CIRCLE_CODE : item.ISCircleDivision.ToLower() == "sanctuary" ? item.Div_Code : "";
                                        string IsCircleOrDivision = item.ISCircleDivision.ToLower() == "circle" ? "Circle" : item.ISCircleDivision.ToLower() == "division" ? "Division" : item.ISCircleDivision.ToLower() == "hq" ? "HQ" : item.ISCircleDivision.ToLower() == "sanctuary" ? "Sanctuary" : "None";

                                    }
                                    <a id='aViewKMLFile' target="_blank" onclick='ViewFile("@IsCircleOrDivision","@item.IsWildlifeOrForest","@Code","Allocation");' href='javascript:void(0)'><img src='../images/globe.png' width='30' /></a>
                                </td>
                                <td>
                                    @Html.ActionLink("EDIT", "EditBudgetInformation", "BudgetAllocationCircle", new { BudgetAllocationID = item.ID }, htmlAttributes: null)
                                </td>
                                <td>
                                    <button type=button class='btn btn-danger btn-circle' style=cursor:pointer onclick="DeleteCircle(@item.ID)"><i class='fa fa-times'></i></button>

                                </td>
                            </tr>
                                        }

                    </tbody>
                </table>



            </div>

            <div class="panel panel-default col-lg-12">
                <div id="modal-window" style="display:none;" title="Transation" class="modal fade">
                    <div class="modal-dialog" style="width: 50%;">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                                <h4 class="modal-title">Budget Allocation Logs</h4>
                            </div>
                            <div class="modal-body">
                                <table class="table table-striped table-bordered table-hover" id="logTbl">
                                    <thead>
                                        <tr>
                                            <th>Office Name</th>
                                            <th>SSO ID</th>
                                            <th>Created Date</th>
                                            <th>Total Amount</th>
                                            <th>Allocated Amount</th>
                                            <th>Extra Amount</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                            <div class="modal-footer">
                                <button type="button" data-dismiss="modal" id="btn-close" class="btn btn-danger">Close</button>
                            </div>
                        </div><!-- /.modal-content -->
                    </div><!-- /.modal-dialog -->
                </div>
                @using (Html.BeginForm("AddBudgetInformation", "BudgetAllocationCircle", FormMethod.Post, new { data_behavior = "confirm", enctype = "multipart/form-data", id = "IdFor" }))
                {
                    <div class="col-lg-12">
                        @Html.HiddenFor(x => x.BudgetHeadAllocationID, new { @id = "BudgetHeadAllocationID", name = "BudgetHeadAllocationID" })
                        <div class="col-lg-12">
                            <div class="col-lg-6">
                                <div class="form-group">
                                    <label>Select Any option <span class="mandatory"></span></label><br />

                                    @Html.RadioButtonFor(s => s.ISCircleDivision, "Circle", new { @class = "ISCircleDivision", @checked = "checked" }) Circle
                                    @Html.RadioButtonFor(s => s.ISCircleDivision, "Division", new { @class = "ISCircleDivision" }) Division
                                    @Html.RadioButtonFor(s => s.ISCircleDivision, "HQ", new { @class = "ISCircleDivision" }) HQ
                                    @Html.RadioButtonFor(s => s.ISCircleDivision, "Sanctuary", new { @class = "ISCircleDivision" }) Sanctuary 
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="form-group">
                                    <label>Office: <span class="mandatory">*</span></label>
                                    @Html.DropDownListFor(x => x.CIRCLE_CODE, (IEnumerable<SelectListItem>)ViewBag.Circle, "--Select--", new { @class = "form-control", @id = "CIRCLE_CODE", name = "CIRCLE_NAME" })

                                    @Html.DropDownListFor(model => model.CIRCLE_CODE, new List<SelectListItem> {
                                                   new SelectListItem{Text="HQ",Value="HQ"}}, new { @class = "form-control hide", @id = "CircleHQ" })
                                    @*<div id="errJFMC" class="alert-danger1">@Html.ValidationMessageFor(x => x.BudgetHeadID)</div>*@
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="col-lg-6" id="divisions" style="display:none">
                                <div class="form-group">
                                    <label>Division: <span class="mandatory">*</span></label>
                                    @Html.DropDownListFor(x => x.Division, (IEnumerable<SelectListItem>)ViewBag.Division, "--Select--", new { @class = "form-control ", @id = "Division", name = "DIV_CODE" })
                                    <div id="errJFMC" class="alert-danger1">@Html.ValidationMessageFor(x => x.Division)</div>
                                </div>
                            </div>
                            <div class="col-lg-6 hide" id="SanctuaryVal">
                                <div class="form-group">
                                    <label>Sanctuary: <span class="mandatory">*</span></label>
                                    @Html.DropDownListFor(model => model.SanctuaryCode, new List<SelectListItem> {
                                                   new SelectListItem{Text="Select",Value=" "}}, new { @class = "form-control", @id = "Sanctuary" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Financial Year: <span class="mandatory">*</span></label>
                                @Html.DropDownListFor(x => x.FY_ID, (IEnumerable<SelectListItem>)ViewBag.FinancialYear, "--Select--", new { @class = "form-control", @id = "FY_ID", name = "FY_ID" })
                                <div id="errJFMC" class="alert-danger1">@Html.ValidationMessageFor(x => x.FY_ID)</div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="form-group">
                                <label>Scheme: <span class="mandatory">*</span></label>

                                @Html.DropDownListFor(x => x.SchemeID, (IEnumerable<SelectListItem>)ViewBag.Scheme, "--Select--", new { @class = "form-control", @id = "SchemeID", name = "SchemeID" })
                                <div id="errJFMC" class="alert-danger1">@Html.ValidationMessageFor(x => x.SchemeID)</div>
                            </div>
                        </div>

                        <div class="col-lg-2">
                            <div class="form-group">
                                <label>Is Core Or Buffer: <span class="mandatory">*</span></label>

                                @Html.DropDownListFor(model => model.IsCoreOrBuffer, new List<SelectListItem> {
                                                   new SelectListItem{Text="BOTH",Value="BOTH"},new SelectListItem{Text="CORE",Value="CORE"},new SelectListItem{Text="BUFFER",Value="BUFFER"}}, new { @class = "form-control", @id = "IsCoreOrBuffer" })
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Budget Head: <span class="mandatory">*</span></label>
                                @Html.DropDownListFor(x => x.BudgetHeadID, (IEnumerable<SelectListItem>)ViewBag.BudgetHead, "--Select--", new { @class = "form-control", @id = "BudgetHeadID", name = "BudgetHeadID" })
                                @*<div id="errJFMC" class="alert-danger1">@Html.ValidationMessageFor(x => x.BudgetHeadID)</div>*@
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Budget Sub Head: <span class="mandatory"></span></label>
                                @Html.DropDownListFor(x => x.SubBudgetHeadID, new SelectList(string.Empty, "Value", "Text"), "--Select--", new { @class = "form-control", @id = "SubBudgetHeadID", name = "SubBudgetHeadID" })
                                @*<div id="errJFMC" class="alert-danger1">@Html.ValidationMessageFor(x => x.SubBudgetHeadID)</div>*@
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Activity : <span class="mandatory">*</span></label>
                                @Html.DropDownListFor(x => x.ActivityID, new SelectList(string.Empty, "Value", "Text"), "--Select--", new { @class = "form-control", @id = "ActivityID", name = "ActivityID" })
                                <div id="errJFMC" class="alert-danger1">@Html.ValidationMessageFor(x => x.ActivityID)</div>
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Sub Activity: <span class="mandatory">*</span></label>
                                @Html.DropDownListFor(x => x.SubActivityID, new SelectList(string.Empty, "Value", "Text"), "--Select--", new { @class = "form-control", @id = "SubActivityID", name = "SubActivityID" })
                                <div id="errJFMC" class="alert-danger1">@Html.ValidationMessageFor(x => x.SubActivityID)</div>
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <div class="col-lg-6">
                                <div class="form-group">
                                    <label>Site Name: <span class="mandatory"></span></label>
                                    @Html.TextBoxFor(x => x.SiteName, new { @class = "form-control", @id = "SiteName", name = "SiteName" })
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="form-group">
                                    <label><span class="mandatory"></span></label><br />
                                    @Html.RadioButtonFor(s => s.IsRecurring, "0", new { @class = "IsRecurring" }) Recurring
                                    @Html.RadioButtonFor(s => s.IsRecurring, "1", new { @class = "IsRecurring" }) Non–Recurring
                                    @Html.RadioButtonFor(s => s.IsRecurring, "2", new { @class = "IsRecurring", @checked = "checked" }) None

                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Unit: <span class="mandatory">*</span></label>
                                @Html.DropDownListFor(x => x.Unit, (IEnumerable<SelectListItem>)ViewBag.Sub_Activity_Unit, "--Select--", new { @class = "form-control", @id = "Unit", name = "Unit" })
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Number: <span class="mandatory"></span></label>
                                @Html.TextBoxFor(s => s.NumberPerUnit, new { @class = "form-control", @id = "NumberPerUnit" })
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Rate: <span class="mandatory"></span></label>
                                @Html.TextBoxFor(s => s.RatePerUnit, new { @class = "form-control", @id = "RatePerUnit" })
                            </div>
                        </div>



                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Available Amount: (lakh)<span class="mandatory">*</span></label>
                                @Html.TextBoxFor(x => x.TotalAmount, new { @class = "form-control", @id = "AvailableAmount", name = "AvailableAmount" })
                                <div id="errJFMC" class="alert-danger1">@Html.ValidationMessageFor(x => x.TotalAmount)</div>

                            </div>
                        </div>
                        @*<div class="col-lg-6">
                                <div class="form-group">
                                    <label>Release Amount: (lakh)<span class="mandatory">*</span></label>
                                    @Html.TextBoxFor(x => x.RemaningAmount, new { @class = "form-control", @id = "RemaningAmount", name = "RemaningAmount" })
                                    <div id="errJFMC" class="alert-danger1">@Html.ValidationMessageFor(x => x.RemaningAmount)</div>
                                </div>
                            </div>*@

                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Allocated Amount: (lakh)<span class="mandatory">*</span></label>
                                @Html.TextBoxFor(x => x.AllocatedAmount, new { @class = "form-control", @id = "AllocatedAmount", name = "AllocatedAmount" })
                                <div id="errJFMC" class="alert-danger1">@Html.ValidationMessageFor(x => x.AllocatedAmount)</div>
                            </div>
                        </div>
                        <label>Get Details:</label><br>
                        <button type="button" class="btn btn-success" title="Save" name="Command" value="Submit" id="btnDetails" style="width:auto">
                            <i class="fa fa-plus"></i> Add
                        </button>
                        <div class="dataTable_wrapper table-responsive scroll-x simplebar horizontal">
                            <table class="table table-striped table-bordered table-hover" id="table1">
                                <thead>
                                    <tr>
                                        <th style="display:none;">
                                            Budget Master Grouping ID
                                        </th>
                                        <th>
                                            Circle/Division
                                        </th>
                                        <th>
                                            Scheme
                                        </th>
                                        <th>
                                            Activity/Sub Activity
                                        </th>
                                        <th>
                                            Budget/Sub Budget Head
                                        </th>
                                        <th>
                                            Allocated Amount (lakh)
                                        </th>
                                        <th>
                                            Action
                                        </th>
                                    </tr>
                                </thead>
                                <tbody id="tblDetails"></tbody>
                            </table>

                        </div>
                        <div id="BudgetCir"></div>
                        <div class="btn-padd">
                            <div id="btn" class="col-lg-12">
                                <button type="submit" class="btn btn-success confirm-toggle" name="Command" value="submit" id="Savepermission">
                                    <i class="fa fa-check"></i> Submit
                                </button>

                                <button type="reset" class="btn btn-warning" onclick="reload(); return false;">
                                    <i class="fa fa-circle-o-notch fa-fw"></i> Reset
                                </button>
                                <button type="submit" name="Command" value="Cancel" class="btn btn-danger" onclick="reload(); return false;">
                                    <i class="fa fa-times fa-fw"></i> Cancel
                                </button>

                            </div>
                        </div>
                    </div>

                }
                <!-- /.Row -->
            </div>

            <!-- /.panel-body -->

        </div>
        <!-- /.panel -->

    </div>


</div>
<script>
    var RootURl = '@Url.Content("~/")';
</script>
<script>

    $(function () {

        $(document).ready(function () {
            $('.gridtable').DataTable({
                responsive: true,
                "bSort": true
            });
        });

        $("#AllocatedAmount").keypress(function (event) {

            if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
                if ((event.which != 46 || $(this).val().indexOf('.') != -1)) {
                    alert('Multiple Decimals are not allowed');
                }
                event.preventDefault();
            }
            if (this.value.indexOf(".") > -1 && (this.value.split('.')[1].length > 4)) {
                alert('Five numbers only allowed after decimal point');
                event.preventDefault();
            }

        });
        $("#AllocatedAmount").blur(function () {
            if ($(this).val() != '') {
                $("#AllocatedAmount").val(parseFloat($(this).val()).toFixed(5));
            }
        });


        // TableList();

        $("#Savepermission").click(function () {
            if ($("#tblDetails tr").length < 1) {
                alert('Please add atleast one record');
                return false;
            }
        });



        $('#BudgetHeadID').change(function (e) {
            var SchemeID = $('#SchemeID option:Selected').val();
            var BudgetHeadID = $('#BudgetHeadID option:Selected').val();
            if (SchemeID != '' && SchemeID != '0' && BudgetHeadID != '' && BudgetHeadID != '0') {
                GetMasterWithSchemeWise(SchemeID, BudgetHeadID, 0, "SubBudgetHead");
                GetMasterWithSchemeWise(SchemeID, BudgetHeadID, 0, "Activity");
            }

        });

        $('#SchemeID').change(function (e) {
            var SchemeID = $('#SchemeID option:Selected').val();
            if (SchemeID != '' && SchemeID != '0') {
                SchemeID = $('#SchemeID').val();
                GetMasterWithSchemeWise(SchemeID, 0, 0, "BudgetHead");
            }

        });


        $('#ActivityID').change(function (e) {
            var ActivityId = $('#ActivityID option:Selected').val();
            var SchemeID = $('#SchemeID option:Selected').val();
            var BudgetHeadID = $('#BudgetHeadID option:Selected').val();
            if (SchemeID != '' && SchemeID != '0' && BudgetHeadID != '' && BudgetHeadID != '0' && ActivityId != '' && ActivityId != '0') {
                GetMasterWithSchemeWise(SchemeID, BudgetHeadID, ActivityId, "SubActivity");
            }

        });

        function GetMasterWithSchemeWise(SchemeID, BudgetHeadID, ActivityID, Action) {
            $.ajax({
                type: 'GET',
                url: RootURl + "BudgetAllocationCircle/GetMasterSchemeWise?SchemeID=" + SchemeID + "&ActionName=" + Action + "&BudgetHeadId=" + BudgetHeadID + "&ActivityID=" + ActivityID,
                success: function (data) {
                    console.log(Action);
                    if (Action == 'BudgetHead') {
                        $("#BudgetHeadID").empty();
                        $("#BudgetHeadID").append('<option value="">--Select--</option>');
                        $.each(data, function (i, items) {
                            $("#BudgetHeadID").append('<option value="' + items.Value + '">' +
                             items.Text + '</option>');
                        });
                    }

                    else if (Action == 'Activity') {
                        $("#ActivityID").empty();
                        $("#ActivityID").append('<option value="">--Select--</option>');
                        $.each(data, function (i, items) {
                            $("#ActivityID").append('<option value="' + items.Value + '">' +
                             items.Text + '</option>');
                        });
                    }


                    else if (Action == 'SubBudgetHead') {
                        $("#SubBudgetHeadID").empty();
                        $("#SubBudgetHeadID").append('<option value="">--Select--</option>');
                        $.each(data, function (i, items) {
                            $("#SubBudgetHeadID").append('<option value="' + items.Value + '">' +
                             items.Text + '</option>');
                        });
                    }

                    else if (Action == 'SubActivity') {
                        $("#SubActivityID").empty();
                        $("#SubActivityID").append('<option value="">--Select--</option>');
                        $.each(data, function (i, items) {
                            $("#SubActivityID").append('<option value="' + items.Value + '">' +
                             items.Text + '</option>');
                        });
                    }



                },
            });
        }





        $('#Division').change(function (e) {
            $("#Sanctuary").empty();
            $("#Sanctuary").append('<option value="0">--Select--</option>');
            if ($(".ISCircleDivision:checked").val() == "Sanctuary" && $("#Division").val() != "" && $("#Division").val() != "0") {
                var DIV_CODE = $("#Division").val();
                $.ajax({
                    type: 'GET',
                    url: RootURl + 'BudgetAllocationCircle/GetSanctuaryList',
                    dataType: 'json',
                    data: { Div_Code: DIV_CODE },
                    success: function (result) {
                        $.each(result, function (i, items) {
                            $("#Sanctuary").append('<option value="' + items.Value + '">' +
                             items.Text + '</option>');

                        });
                    },

                });
            }
            else {
                $("#Sanctuary").append('<option value="0">--Select--</option>');

            }

        });






        $('#btnDetails').click(function () {

            if ($('#FY_ID').val() == '') {
                $('#FY_ID').focus();
                return false;
            }
            if ($('#SchemeID').val() == '') {

                $('#SchemeID').focus();
                return false;
            }
            if ($('#ActivityID').val() == 0 || $('#ActivityID').val() == '') {
                $('#ActivityID').focus();
                return false;
            }
            //if ($('#SubActivityID').val() == 0 || $('#SubActivityID').val() == '') {

            //    $('#SubActivityID').focus();
            //    return false;
            //}
            if ($('#BudgetHeadID').val() == '' || $('#BudgetHeadID').val() == 0) {

                $('#BudgetHeadID').focus();
                return false;
            }

            //if ($('#CIRCLE_CODE').val() == '' || $('#CIRCLE_CODE').val() == 'undefined') {
            //    $('#CIRCLE_CODE').focus();
            //    return false;
            //}

            if ($(".ISCircleDivision:checked").val() == "Circle") {
                if ($('#CIRCLE_CODE').val() == '' || $('#CIRCLE_CODE').val() == 'undefined') {
                    $('#CIRCLE_CODE').focus();
                    return false;
                }
            }
            else if ($(".ISCircleDivision:checked").val() == "Division") {
                if ($('#Division').val() == '' || $('#Division').val() == '0' || $('#Division').val() == 'undefined') {
                    $('#Division').focus();
                    return false;
                }
            }
            else if ($(".ISCircleDivision:checked").val() == "HQ") {
                if ($('#CircleHQ').val() == '' || $('#CircleHQ').val() == 'undefined') {
                    $('#CircleHQ').focus();
                    return false;
                }
            }
            else if ($(".ISCircleDivision:checked").val() == "Sanctuary") {
                if ($('#Division').val() == '' || $('#Division').val() == '0' || $('#Division').val() == 'undefined') {
                    $('#Division').focus();
                    return false;
                }
                if ($('#Sanctuary').val() == '' || $('#Sanctuary').val() == '0' || $('#Sanctuary').val() == 'undefined') {
                    $('#Sanctuary').focus();
                    return false;
                }
            }
            if ($('#AllocatedAmount').val() == '' || parseFloat($('#AllocatedAmount').val()) == 0) {
                $('#AllocatedAmount').focus();
                return false;
            }
            if (parseFloat($('#AvailableAmount').val()) < parseFloat($('#AllocatedAmount').val())) {
                alert('Allocated amount cannot be exceed than Available amount!!!');
                $('#AllocatedAmount').focus();
                return false;
            }
            else {
                if (parseFloat($("#AllocatedAmount").val()) <= parseFloat($("#AvailableAmount").val())) {
                    //$("#RemaningAmount").val(parseFloat($("#RemaningAmount").val()) - parseFloat($("#AllocatedAmount").val()));
                }
                else {
                    alert('Allocated amount cannot be exceed than Available amount!!!');
                    $('#AllocatedAmount').focus();
                    return false;
                }

                var Division = '0';
                if ($("#divisions").attr("style") == 'display:block' && $(".ISCircleDivision:checked").val() == "Division") {
                    if ($('#Division').val() != '' && $('#Division').val() != '0' && $('#Division').val() != 'undefined') {
                        Division = $('#Division').val();
                        Circles = $("#CIRCLE_CODE").val();
                    }
                    else {
                        $('#Division').focus();
                        return false;
                    }
                }
                var Sanctuary = '0';
                if ($("#divisions").attr("style") == 'display:block' && $(".ISCircleDivision:checked").val() == "Sanctuary") {
                    if ($('#Division').val() != '' && $('#Division').val() != '0' && $('#Division').val() != 'undefined') {
                        Division = $('#Division').val();
                        Circles = $("#CIRCLE_CODE").val();
                    }
                    else {
                        $('#Division').focus();
                        return false;
                    }
                    if ($('#Sanctuary').val() != '' && $('#Sanctuary').val() != '0' && $('#Sanctuary').val() != 'undefined') {
                        Sanctuary = $("#Sanctuary").val();
                    }
                    else {
                        $('#Sanctuary').focus();
                        return false;
                    }
                }
                if ($(".ISCircleDivision:checked").val() == "Circle" && $("#CIRCLE_CODE option:selected").val() != "") {
                    Circles = $("#CIRCLE_CODE").val();
                }
                if ($(".ISCircleDivision:checked").val() == "HQ" && $("#CircleHQ option:selected").val() != "") {
                    Circles = $("#CircleHQ").val();
                }



                var values = {
                    ISCircleDivision: $('.ISCircleDivision:checked').val(),
                    CIRCLE_CODE: Circles,
                    Division: Division,
                    SanctuaryCode: Sanctuary,

                    FY_ID: $('#FY_ID').val(),
                    SchemeID: $('#SchemeID').val(),
                    SchemeName: $('#SchemeID option:selected').text(),
                    BudgetHeadID: $('#BudgetHeadID').val(),
                    SubBudgetHeadID: $('#SubBudgetHeadID').val(),
                    SiteName: $('#SiteName').val(),
                    IsRecurring: $('#IsRecurring:checked').val(),
                    ActivityID: $('#ActivityID').val(),
                    ActivityName: $('#ActivityID option:selected').text(),
                    SubActivityID: $('#SubActivityID').val(),
                    SubActivityName: $('#SubActivityID option:selected').text(),
                    Unit: $('#Unit').val(),
                    NumberPerUnit: $('#NumberPerUnit').val(),
                    RatePerUnit: $('#RatePerUnit').val(),
                    IsCoreOrBuffer: $("#IsCoreOrBuffer").val(),
                    TotalAmount: $('#AvailableAmount').val(),
                    RemaningAmount: $('#RemaningAmount').val(),
                    AllocatedAmount: $('#AllocatedAmount').val(),
                    BudgetHeadAllocationID: $('#BudgetHeadAllocationID').val(),


                };
                $.ajax({
                    type: 'POST',
                    url: RootURl + 'BudgetAllocationCircle/AddCircleDetailsMaster',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(values),
                    success: function (data) {

                        if (data.rowid != "D") {
                            var id = "'" + data.rowid + "'";
                            var BudgetHead = $("#BudgetHeadID option:selected").text();
                            var SubBudgetHead = "None";
                            if ($("#SubBudgetHeadID option:selected").val() != "0") {
                                SubBudgetHead = $("#SubBudgetHeadID option:selected").text();
                            }
                            var Circle = "None";
                            var Division = "None";
                            if ($(".ISCircleDivision:checked").val() == "Division" && $("#CIRCLE_CODE option:selected").val() != "") {
                                Division = $("#Division option:selected").text();
                            }
                            else if ($(".ISCircleDivision:checked").val() == "Circle" && $("#CIRCLE_CODE option:selected").val() != "") {
                                Circle = $("#CIRCLE_CODE option:selected").text();
                            }
                            else if ($(".ISCircleDivision:checked").val() == "HQ" && $("#CircleHQ option:selected").val() != "") {
                                Circle = $("#CircleHQ option:selected").text();
                            }

                            var rowdata = "<tr><td style=display:none;>" + data.rowid + "</td><td style=display:none;>" + data.ISCircleDivision + "</td><td style=display:none;>" + 'BUDGETALLOCATION-' + data.BudgetHeadAllocationID + "</td><td>" + Circle + " / " + Division + "</td><td>" + data.SchemeName + "</td><td>" + data.ActivityName + "/" + data.SubActivityName + "</td><td>" + BudgetHead + " / " + SubBudgetHead + "</td><td>" + parseFloat(data.AllocatedAmount).toFixed(2) + "</td><td>" + "<button type=button class='btn btn-danger btn-circle btndelete' style=cursor:pointer><i class='fa fa-times'></i></button>" + "</td></tr>";

                            $("#tblDetails").append(rowdata);
                            $('#tblDetailsAdd').append(rowdata);
                            var remaningAmount = (parseFloat($('#RemaningAmount').val()) - parseFloat($('#AllocatedAmount').val()))
                            $('#RemaningAmount').val(parseFloat(remaningAmount).toFixed(2));
                            $('#AllocatedAmount').val('');

                        }
                        else {

                            alert("Records already added!!");
                        }
                    }
                });
            }
        });
    });





    function TableList() {

        $.ajax({
            type: 'POST',
            url: RootURl + "BudgetAllocationCircle/BudgetAllocationCircleList",
            dataType: 'json',
            data: {},
            success: function (data) {

                $.each(data, function (i, item) {

                    var id = "'" + item.rowid + "'";
                    var rowdata = "<tr><td style=display:none;>" + item.rowid + "</td><td style=display:none;>" + item.ISCircleDivision + "</td><td>" + 'BUDGETALLOCATION-' + item.BudgetHeadAllocationID + "</td><td>" + item.CIRCLE_NAME + "</td><td>" + item.SchemeName + "</td><td>" + item.ActivityName + "</td><td>" + item.BudgetHead + "</td><td>" + parseFloat(item.AllocatedAmount).toFixed(2) + "</td><td>" + "<button type=button class='btn btn-danger btn-circle btndelete' style=cursor:pointer ><i class='fa fa-times'></i></button>" + "</td></tr>";
                    $("#tblDetails").append(rowdata);
                });
            },

        });
    }


    function AvaliableAmount() {

        var values = {
            FY_ID: $('#FY_ID').val(),
            BudgetHeadID: $('#BudgetHeadID').val(),
            SubBudgetHeadID: $('#SubBudgetHeadID').val(),

            SchemeID: $('#SchemeID').val(),
            ActivityID: $('#ActivityID').val(),
            SubActivityID: $('#SubActivityID').val()

        }
        $.ajax({
            type: 'POST',
            url: RootURl + 'BudgetAllocationCircle/GetAllocatedAmtDetails',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(values),
            success: function (data) {

                $('#AvailableAmount').val(parseFloat(data.AvaliableAmount).toFixed(2));
                $('#RemaningAmount').val(parseFloat(data.RemaningAmount).toFixed(2));
                $('#BudgetHeadAllocationID').val(data.BudgetAllocationHeadId);

            },

        });

    }



    $(document).on('click', '.btndelete', function () {

        if (confirm("Are you sure you want to delete this?")) {

            var $item = $(this).closest("tr").find('td');
            var i = 0;
            var ID;
            var ISCircleDivision;
            $.each($item, function (key, value) {
                if (i == 0) {
                    ID = $(value).text();
                }
                if (i == 1) {
                    ISCircleDivision = $(value).text();
                    $(this).closest('tr').remove();
                }
                i++;
            });
            $.ajax({
                type: 'POST',
                url: RootURl + 'BudgetAllocationCircle/DeleteBudgetAllocation',
                dataType: 'json',
                data: { Id: ID, ISCircleDivision: ISCircleDivision },
                success: function (data) {

                    if (data == '1') {

                        alert('Data deleted from table');


                    }
                    else {
                        alert('Data not deleted from table please check!!!!');
                    }
                },
                traditional: true,
                error: function (data) { console.log(data) }
            });

        }
        else {

            return false;
        }


    });


    function reload() {
        location.reload(true);
    }




    $(".ISCircleDivision").change(function () {
        $("#CIRCLE_CODE").val('');
        if ($(".ISCircleDivision:checked").val() == "Sanctuary") {
            $("#divisions").attr("style", "display:block");
            $("#SanctuaryVal").removeClass('hide');
            $("#CIRCLE_CODE").removeClass('hide');
            $("#CircleHQ").addClass('hide');

        }

        else if ($(".ISCircleDivision:checked").val() == "HQ") {

            $("#divisions").attr("style", "display:none");
            $("#CIRCLE_CODE").addClass('hide');
            $("#CircleHQ").removeClass('hide');
            $("#SanctuaryVal").addClass('hide');

        }
        else if ($(".ISCircleDivision:checked").val() == "Division") {
            $("#divisions").attr("style", "display:block");
            $("#CircleHQ").addClass('hide');
            $("#CIRCLE_CODE").removeClass('hide');
            $("#SanctuaryVal").addClass('hide');
        }
        else {
            $("#divisions").attr("style", "display:none");
            $("#CircleHQ").addClass('hide');
            $("#CIRCLE_CODE").removeClass('hide');
            $("#SanctuaryVal").addClass('hide');
        }

    });
    var RootUrl = '@Url.Content("~/")';
    $('#CIRCLE_CODE').change(function (e) {
        if ($(".ISCircleDivision:checked").val() == "Division" || $(".ISCircleDivision:checked").val() == "Sanctuary") {
            $("#Division").empty();
            $.ajax({
                type: 'POST',
                url: RootUrl + 'MISCitizen/DivisionData', // we are calling json method
                dataType: 'json',
                data: { circleCode: $("#CIRCLE_CODE").val() },
                success: function (circle) {
                    $.each(circle, function (i, items) {
                        $("#Division").append('<option value="' + items.Value + '">' + items.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }

            });
            return false;
        }
    });
    $(document).ready(function () {
        $('#Division').empty();
        $('#Division').append("<option value=''>--Select--</option>")
    });


    function DeleteCircle(ID) {
        if (confirm("Are you sure you want to delete this?")) {

            if (ID != null && ID > 0) {
                $.ajax({
                    type: 'POST',
                    url: RootURl + 'BudgetAllocationCircle/DeleteBudgetAllocatedEntry',
                    dataType: 'json',
                    data: { Id: ID },
                    success: function (data) {
                        if (data == '1') {
                            alert('Data deleted successfully');
                            reload();
                        }
                        else {
                            alert('Data not deleted from table please check!!!!');
                        }
                    },
                    traditional: true,
                    error: function (data) { console.log(data) }
                });
            }
        }
        else {

            return false;
        }
    }

    function reload() {
        location.reload(true);
    }


</script>
